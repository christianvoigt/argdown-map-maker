{"version":3,"sources":["../../src/MapMaker.js"],"names":["_","MapMaker","config","name","data","map","makeMap","nodes","edges","nodeCount","edgeCount","statementNodes","argumentNodes","relationsForMap","untitledTest","statementKeys","Object","keys","statements","statementKey","equivalenceClass","selectionTest","isConnected","relations","length","isUsedAsPremise","isUsedAsConclusion","notUsedInArgumentButWithRelations","settings","statementSelectionMode","exec","title","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","excludeDisconnected","id","node","addNodeText","lastMember","last","members","text","push","relation","from","type","includes","argumentKeys","arguments","statementRoles","argumentKey","hasRelations","argument","descriptions","pcs","statement","roles","premiseIn","conclusionIn","role","to","froms","tos","fromNode","fromStatement","apply","toNode","toStatement","edgeId","edge","status","fromRoles","argumentNode","edgeType","groupMode","nodeList","groupDict","groupList","maxGroupLevel","section","member","level","group","parent","minGroupLevel","groupDepth","parentGroup","defaults","module","exports"],"mappings":";;;;AAAA;;AACA;;IAAYA,C;;AACZ;;AACA;;;;;;IAEMC,Q;AACJ,oBAAYC,MAAZ,EAAmB;AAAA;;AACjB,SAAKC,IAAL,GAAY,UAAZ;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;;;;wBAUGE,I,EAAK;AACP,UAAGA,KAAKF,MAAR,EAAe;AACb,YAAGE,KAAKF,MAAL,CAAYG,GAAf,EAAmB;AACjB,eAAKH,MAAL,GAAcE,KAAKF,MAAL,CAAYG,GAA1B;AACD,SAFD,MAEM,IAAGD,KAAKF,MAAL,CAAYD,QAAf,EAAwB;AAC5B,eAAKC,MAAL,GAAcE,KAAKF,MAAL,CAAYD,QAA1B;AACD;AACF;;AAEDG,WAAKC,GAAL,GAAW,KAAKC,OAAL,CAAaF,IAAb,CAAX;AACA,aAAOA,IAAP;AACD;;;4BACOA,I,EAAK;AACX,UAAIC,MAAM,EAACE,OAAO,EAAR,EAAYC,OAAO,EAAnB,EAAV;AACA,UAAIC,YAAY,CAAhB,CAFW,CAEQ;AACnB,UAAIC,YAAY,CAAhB,CAHW,CAGQ;AACnB,UAAIC,iBAAiB,EAArB,CAJW,CAIc;AACzB,UAAIC,gBAAgB,EAApB,CALW,CAKa;AACxB,UAAIC,kBAAkB,EAAtB,CANW,CAMe;;AAE1B,UAAMC,eAAe,WAArB;;AAEA;AACA;AACA,UAAIC,gBAAgBC,OAAOC,IAAP,CAAYb,KAAKc,UAAjB,CAApB;AAZW;AAAA;AAAA;;AAAA;AAaX,6BAAwBH,aAAxB,8HAAsC;AAAA,cAA9BI,YAA8B;;AACpC,cAAIC,oBAAmBhB,KAAKc,UAAL,CAAgBC,YAAhB,CAAvB;AACA,cAAIE,gBAAgB,IAApB;;AAEA,cAAIC,cAAcF,kBAAiBG,SAAjB,CAA2BC,MAA3B,GAAoC,CAApC,IAAyCJ,kBAAiBK,eAA1D,IAA6EL,kBAAiBM,kBAAhH;AACA,cAAIC,oCAAoCP,kBAAiBG,SAAjB,CAA2BC,MAA3B,GAAoC,CAApC,IAAyC,CAACJ,kBAAiBK,eAA3D,IAA8E,CAACL,kBAAiBM,kBAAxI;;AAEA,cAAG,KAAKE,QAAL,CAAcC,sBAAd,IAAwC,KAA3C,EAAiD;AAC/CR,4BAAgB,IAAhB;AACD,eAAG,KAAKO,QAAL,CAAcC,sBAAd,IAAwC,QAA3C,EAAoD;AACnDR,4BAAgBM,qCAAqC,CAACb,aAAagB,IAAb,CAAkBV,kBAAiBW,KAAnC,CAAtD;AACD,WAFA,MAEK,IAAG,KAAKH,QAAL,CAAcC,sBAAd,IAAwC,OAA3C,EAAmD;AACvDR,4BAAgBM,qCAAqCP,kBAAiBY,2BAAtE;AACD,WAFK,MAEA,IAAG,KAAKJ,QAAL,CAAcC,sBAAd,IAAwC,iBAA3C,EAA6D;AACjER,4BAAgBD,kBAAiBY,2BAAjB,IAAgDZ,kBAAiBa,4BAAjF;AACD,WAFK,MAEA,IAAG,KAAKL,QAAL,CAAcC,sBAAd,IAAwC,gBAA3C,EAA4D;AAChER,4BAAgBD,kBAAiBG,SAAjB,CAA2BC,MAA3B,GAAoC,CAApD;AACD;AACD,cAAG,CAAC,CAAC,KAAKI,QAAL,CAAcM,mBAAf,IAAqCZ,WAAtC,KAAsDD,aAAzD,EAAuE;AACrE,gBAAIc,KAAK,MAAI1B,SAAb;AACAA;AACA,gBAAI2B,SAAO,eAAS,WAAT,EAAsBjB,YAAtB,EAAoCgB,EAApC,CAAX;AACA,gBAAG,KAAKP,QAAL,CAAcS,WAAjB,EAA6B;AAC3B,kBAAMC,aAAatC,EAAEuC,IAAF,CAAOnB,kBAAiBoB,OAAxB,CAAnB;AACA,kBAAGF,UAAH,EAAc;AACZF,uBAAKK,IAAL,GAAYH,WAAWG,IAAvB;AACD;AACF;AACD9B,2BAAeQ,YAAf,IAA+BiB,MAA/B;AACA/B,gBAAIE,KAAJ,CAAUmC,IAAV,CAAeN,MAAf;;AAEA;AAbqE;AAAA;AAAA;;AAAA;AAcrE,qCAAoBhB,kBAAiBG,SAArC,wIAA+C;AAAA,oBAAvCoB,QAAuC;;AAC7C,oBAAGA,SAASC,IAAT,IAAiBxB,iBAAjB,IAAqCuB,SAASE,IAAT,KAAkB,eAA1D,EAA0E;AACxEhC,kCAAgB6B,IAAhB,CAAqBC,QAArB;AACD,iBAFD,MAEM,IAAGA,SAASE,IAAT,IAAiB,eAAjB,IAAoC,CAAC7C,EAAE8C,QAAF,CAAWjC,eAAX,EAA4B8B,QAA5B,CAAxC,EAA8E;AAClF9B,kCAAgB6B,IAAhB,CAAqBC,QAArB;AACD;AACF;AApBoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBtE;AACF;AArDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuDX,UAAII,eAAe/B,OAAOC,IAAP,CAAYb,KAAK4C,SAAjB,CAAnB;AACA,UAAIC,iBAAiB,EAArB,CAxDW,CAwDc;;AAEzB;AACA;AACA;AA5DW;AAAA;AAAA;;AAAA;AA6DX,8BAAuBF,YAAvB,mIAAoC;AAAA,cAA5BG,WAA4B;;AAClC,cAAIC,eAAe,KAAnB;AACA,cAAIC,YAAWhD,KAAK4C,SAAL,CAAeE,WAAf,CAAf;AACA,cAAIf,MAAK,MAAI1B,SAAb;AACAA;AACA,cAAI2B,SAAO,eAAS,UAAT,EAAqBgB,UAASrB,KAA9B,EAAqCI,GAArC,CAAX;AACA,cAAG,KAAKP,QAAL,CAAcS,WAAjB,EAA6B;AAC3B,gBAAMC,cAAatC,EAAEuC,IAAF,CAAOa,UAASC,YAAhB,CAAnB;AACA,gBAAGf,WAAH,EAAc;AACZF,qBAAKK,IAAL,GAAYH,YAAWG,IAAvB;AACD;AACF;;AAXiC;AAAA;AAAA;;AAAA;AAalC,mCAAoBW,UAAS7B,SAA7B,wIAAuC;AAAA,kBAA/BoB,SAA+B;;AACrCQ,6BAAe,IAAf;AACA;AACA,kBAAGR,UAASC,IAAT,IAAiBQ,SAApB,EAA6B;AAC3BvC,gCAAgB6B,IAAhB,CAAqBC,SAArB;AACD;AACF;AAnBiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAoBlC,mCAAqBS,UAASE,GAA9B,wIAAkC;AAAA,kBAA1BC,SAA0B;;AAChC,kBAAIC,QAAQP,eAAeM,UAAUxB,KAAzB,CAAZ;AACA,kBAAIX,qBAAmBhB,KAAKc,UAAL,CAAgBqC,UAAUxB,KAA1B,CAAvB;AACA,kBAAG,CAACyB,KAAJ,EAAU;AACRA,wBAAQ,EAACC,WAAU,EAAX,EAAeC,cAAa,EAA5B,EAAR;AACAT,+BAAeM,UAAUxB,KAAzB,IAAkCyB,KAAlC;AACD;AACD,kBAAG7C,eAAe4C,UAAUxB,KAAzB,CAAH,EAAmC;AACjC;AACAoB,+BAAe,IAAf;AACD;AACD,kBAAGI,UAAUI,IAAV,IAAkB,SAArB,EAA+B;AAC7BH,sBAAMC,SAAN,CAAgBf,IAAhB,CAAqBN,MAArB;AAD6B;AAAA;AAAA;;AAAA;AAE7B,yCAAoBhB,mBAAiBG,SAArC,wIAA+C;AAAA,wBAAvCoB,UAAuC;;AAC7C,wBAAGA,WAASiB,EAAT,IAAexC,kBAAf,IAAmCuB,WAASE,IAAT,IAAiB,eAAvD,EAAuE;AACrEM,qCAAe,IAAf;AACD;AACF;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B,eAPD,MAOM,IAAGI,UAAUI,IAAV,IAAkB,YAAlB,IAAkCJ,aAAaH,UAASE,GAAT,CAAaF,UAASE,GAAT,CAAa9B,MAAb,GAAsB,CAAnC,CAAlD,EAAwF;AAC5FgC,sBAAME,YAAN,CAAmBhB,IAAnB,CAAwBN,MAAxB;;AAD4F;AAAA;AAAA;;AAAA;AAG5F,yCAAoBhB,mBAAiBG,SAArC,wIAA+C;AAAA,wBAAvCoB,UAAuC;;AAC7C,wBAAGA,WAASC,IAAT,IAAiBxB,kBAApB,EAAqC;AACnC+B,qCAAe,IAAf;AACA;AACA;AACA,0BAAG,CAACxC,eAAe4C,UAAUxB,KAAzB,CAAD,KAAqC,CAACY,WAASE,IAAV,IAAkB,eAAlB,IAAoC,CAAC7C,EAAE8C,QAAF,CAAWjC,eAAX,EAA2B8B,UAA3B,CAA1E,CAAH,EAAmH;AACjH9B,wCAAgB6B,IAAhB,CAAqBC,UAArB;AACD;AACF,qBAPD,MAOM,IAAGA,WAASE,IAAT,IAAiB,eAAjB,IAAoC,CAAC7C,EAAE8C,QAAF,CAAWjC,eAAX,EAA2B8B,UAA3B,CAAxC,EAA6E;AACjFQ,qCAAe,IAAf;AACAtC,sCAAgB6B,IAAhB,CAAqBC,UAArB;AACD;AACF;AAf2F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB7F;AACF;AACD;AAxDkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyDlC,cAAG,CAAC,KAAKf,QAAL,CAAcM,mBAAf,IAAsCiB,YAAzC,EAAsD;AACpDvC,0BAAcsC,WAAd,IAA6Bd,MAA7B;AACA/B,gBAAIE,KAAJ,CAAUmC,IAAV,CAAeN,MAAf;AACD;AACF;;AAGD;AACA;AACA;AACA;AACA;AAjIW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAkIX,8BAAoBvB,eAApB,mIAAoC;AAAA,cAA5B8B,UAA4B;;AAClC,cAAIkB,QAAQ,EAAZ,CADkC,CAClB;AAChB,cAAIC,MAAM,EAAV,CAFkC,CAEpB;;AAEd,cAAIC,iBAAJ;AACA,cAAIC,sBAAJ;;AAEA,cAAGrB,WAASC,IAAT,mCAAH,EAAqC;AACnCmB,uBAAWnD,cAAc+B,WAASC,IAAT,CAAcb,KAA5B,CAAX;AACD,WAFD,MAEK;AACHgC,uBAAWpD,eAAegC,WAASC,IAAT,CAAcb,KAA7B,CAAX;AACAiC,4BAAgB5D,KAAKc,UAAL,CAAgByB,WAASC,IAAT,CAAcb,KAA9B,CAAhB;AACD;;AAED,cAAG,CAACgC,QAAJ,EAAa;AAAE;AACb,gBAAIP,SAAQP,eAAeN,WAASC,IAAT,CAAcb,KAA7B,CAAZ;AACAiC,4BAAgB5D,KAAKc,UAAL,CAAgByB,WAASC,IAAT,CAAcb,KAA9B,CAAhB;AACA,gBAAGyB,MAAH,EAAS;AACPK,oBAAMnB,IAAN,CAAWuB,KAAX,CAAiBJ,KAAjB,EAAwBL,OAAME,YAA9B;AACD;AACF,WAND,MAMK;AAAE;AACLG,kBAAMnB,IAAN,CAAWqB,QAAX;AACD;;AAED,cAAIG,eAAJ;AACA,cAAIC,oBAAJ;;AAEA,cAAGxB,WAASiB,EAAT,mCAAH,EAAmC;AACjCM,qBAAStD,cAAc+B,WAASiB,EAAT,CAAY7B,KAA1B,CAAT;AACD,WAFD,MAEK;AACHmC,qBAASvD,eAAegC,WAASiB,EAAT,CAAY7B,KAA3B,CAAT;AACAoC,0BAAc/D,KAAKc,UAAL,CAAgByB,WAASiB,EAAT,CAAY7B,KAA5B,CAAd;AACD;;AAED,cAAG,CAACmC,MAAJ,EAAW;AAAE;AACX,gBAAIV,UAAQP,eAAeN,WAASiB,EAAT,CAAY7B,KAA3B,CAAZ;AACAoC,0BAAc/D,KAAKc,UAAL,CAAgByB,WAASiB,EAAT,CAAY7B,KAA5B,CAAd;AACA,gBAAGyB,OAAH,EAAS;AACPM,kBAAIpB,IAAJ,CAASuB,KAAT,CAAeH,GAAf,EAAoBN,QAAMC,SAA1B;AACD;AACF,WAND,MAMK;AAAE;AACLK,gBAAIpB,IAAJ,CAASwB,MAAT;AACD;;AAED,cAAGvB,WAASE,IAAT,IAAiB,eAApB,EAAoC;AAClC;AACA;AACA;AACA,gBAAGkB,YAAYG,MAAZ,IAAsB,EAAEH,2CAAF,CAAtB,IAAyD,EAAEG,yCAAF,CAA5D,EAA0F;AACxF,kBAAIE,SAAS,MAAI1D,SAAjB;AACAA;AACA,kBAAI2D,OAAO,eAAS;AACRlC,oBAAGiC,MADK;AAERxB,sBAAKsB,MAFG,EAEK;AACbN,oBAAGG,QAHK,EAGK;AACbC,+BAAeG,WAJP,EAIoB;AAC5BA,6BAAaH,aALL,EAKoB;AAC5BnB,sBAAK,QANG;AAORyB,wBAAQ;AAPA,eAAT,CAAX;AASAjE,kBAAIG,KAAJ,CAAUkC,IAAV,CAAe2B,IAAf;AACD;AACD,gBAAIE,YAAYtB,eAAeN,WAASC,IAAT,CAAcb,KAA7B,CAAhB;AACA,gBAAGwC,aAAaA,UAAUd,SAA1B,EAAoC;AAAA;AAAA;AAAA;;AAAA;AAClC,uCAAwBc,UAAUd,SAAlC,wIAA4C;AAAA,sBAApCe,YAAoC;AAAA;AAAA;AAAA;;AAAA;AAC1C,2CAAcV,GAAd,wIAAkB;AAAA,0BAAVF,EAAU;;AAChB,0BAAIQ,UAAS,MAAI1D,SAAjB;AACAA;AACAL,0BAAIG,KAAJ,CAAUkC,IAAV,CAAe,eAAS;AACtBP,4BAAGiC,OADmB;AAEtBxB,8BAAKgB,EAFiB;AAGtBA,4BAAGY,YAHmB;AAItBR,uCAAcG,WAJQ;AAKtBA,qCAAaH,aALS;AAMtBnB,8BAAK,QANiB;AAOtByB,gCAAO;AAPe,uBAAT,CAAf;AASD;AAbyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc3C;AAfiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBnC;AAEF;;AAED;AACA,cAAIG,WAAW9B,WAASE,IAAxB;AACA,cAAG4B,YAAY,eAAZ,IAA8BA,YAAY,UAA7C,EAAwD;AACtDA,uBAAW,QAAX;AACD,WAFD,MAEM,IAAGA,YAAY,SAAf,EAAyB;AAC7BA,uBAAW,SAAX;AACD;AAzFiC;AAAA;AAAA;;AAAA;AA0FlC,mCAAgBZ,KAAhB,wIAAsB;AAAA,kBAAdjB,IAAc;AAAA;AAAA;AAAA;;AAAA;AACpB,uCAAckB,GAAd,wIAAkB;AAAA,sBAAVF,GAAU;;AAChB,sBAAIQ,WAAS,MAAI1D,SAAjB;AACAA;AACAL,sBAAIG,KAAJ,CAAUkC,IAAV,CAAe,eAAS;AACtBP,wBAAGiC,QADmB;AAEtBxB,0BAAKA,IAFiB,EAEX;AACXgB,wBAAGA,GAHmB,EAGf;AACPI,mCAAeA,aAJO,EAIQ;AAC9BG,iCAAaA,WALS,EAKI;AAC1BtB,0BAAK4B,QANiB;AAOtBH,4BAAQ3B,WAAS2B;AAPK,mBAAT,CAAf;AASD;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcrB;AAxGiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyGnC;;AAED;AACA;AACA;AA/OW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAgPX,8BAAgBjE,IAAIE,KAApB,mIAA0B;AAAA,cAAlB6B,MAAkB;;AACxB,cAAGA,OAAKS,IAAL,IAAa,WAAhB,EAA4B;AAC1B,gBAAIW,UAAQP,eAAeb,OAAKL,KAApB,CAAZ;AACA,gBAAIwB,aAAYnD,KAAKc,UAAL,CAAgBkB,OAAKL,KAArB,CAAhB;AACA,gBAAGyB,OAAH,EAAS;AACP;AADO;AAAA;AAAA;;AAAA;AAEP,uCAAwBA,QAAME,YAA9B,wIAA2C;AAAA,sBAAnCc,aAAmC;;AACzC,sBAAIJ,WAAS,MAAI1D,SAAjB;AACAA;AACAL,sBAAIG,KAAJ,CAAUkC,IAAV,CAAe,eAAS;AACtBP,wBAAGiC,QADmB;AAEtBxB,0BAAK4B,aAFiB,EAEH;AACnBZ,wBAAGxB,MAHmB,EAGb;AACT4B,mCAAeT,UAJO,EAII;AAC1BY,iCAAaZ,UALS,EAKE;AACxBV,0BAAK,SANiB;AAOtByB,4BAAQ;AAPc,mBAAT,CAAf;AASD;;AAED;AAhBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAiBP,uCAAwBd,QAAMC,SAA9B,wIAAwC;AAAA,sBAAhCe,cAAgC;;AACtC,sBAAIJ,WAAS,MAAI1D,SAAjB;AACAA;AACAL,sBAAIG,KAAJ,CAAUkC,IAAV,CAAe,eAAS;AACtBP,wBAAGiC,QADmB;AAEtBxB,0BAAKR,MAFiB,EAEX;AACXwB,wBAAGY,cAHmB,EAGL;AACjBR,mCAAeT,UAJO,EAII;AAC1BY,iCAAaZ,UALS,EAKE;AACxBV,0BAAK,SANiB;AAOtByB,4BAAQ;AAPc,mBAAT,CAAf;AASD;AA7BM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BR;AACF;AACF;;AAED;AACA;AACA;AACA;AAzRW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0RX,UAAG,KAAK1C,QAAL,CAAc8C,SAAd,IAA2B,KAAK9C,QAAL,CAAc8C,SAAd,IAA2B,MAAzD,EAAgE;AAC9D,YAAMC,WAAWtE,IAAIE,KAArB;AACAF,YAAIE,KAAJ,GAAY,EAAZ;;AAEA,YAAMqE,YAAY,EAAlB;AACA,YAAMC,YAAY,EAAlB;;AAEA,YAAIC,gBAAgB,CAApB;;AAP8D;AAAA;AAAA;;AAAA;AAS9D,gCAAgBH,QAAhB,mIAAyB;AAAA,gBAAjBvC,IAAiB;;AACvB,gBAAI2C,UAAU,IAAd;AACA,gBAAG3C,KAAKS,IAAL,IAAa,UAAhB,EAA2B;AACzB,kBAAIO,WAAWhD,KAAK4C,SAAL,CAAeZ,KAAKL,KAApB,CAAf;AACA,kBAAGqB,SAAS2B,OAAZ,EAAoB;AAClBA,0BAAU3B,SAAS2B,OAAnB;AACD,eAFD,MAEK;AAAA;AAAA;AAAA;;AAAA;AACH,wCAAkB3B,SAASC,YAA3B,mIAAwC;AAAA,wBAAhC2B,MAAgC;;AACtC,wBAAGA,OAAOD,OAAV,EAAkB;AAChBA,gCAAUC,OAAOD,OAAjB;AACA;AACD;AACF;AANE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOJ;AACF,aAZD,MAYK;AACH,kBAAI3D,mBAAmBhB,KAAKc,UAAL,CAAgBkB,KAAKL,KAArB,CAAvB;AADG;AAAA;AAAA;;AAAA;AAEH,sCAAkBX,iBAAiBoB,OAAnC,mIAA2C;AAAA,sBAAnCwC,OAAmC;;AACzC,sBAAGA,QAAOD,OAAV,EAAkB;AAChBA,8BAAUC,QAAOD,OAAjB;AACA;AACD;AACF;AAPE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQJ;;AAED,gBAAGA,OAAH,EAAW;AACT,kBAAGD,gBAAgBC,QAAQE,KAA3B,EAAiC;AAC/BH,gCAAgBC,QAAQE,KAAxB;AACD;AACD,kBAAIC,QAAQN,UAAUG,QAAQ5C,EAAlB,CAAZ;AACA,kBAAG,CAAC+C,KAAJ,EAAU;AACRA,wBAAQ;AACNrC,wBAAM,OADA;AAENV,sBAAG4C,QAAQ5C,EAFL;AAGNJ,yBAAOgD,QAAQhD,KAHT;AAINkD,yBAAOF,QAAQE,KAJT;AAKN1E,yBAAO;AALD,iBAAR;AAOA,oBAAGwE,QAAQI,MAAX,EAAkB;AAChBD,wBAAMC,MAAN,GAAeJ,QAAQI,MAAR,CAAehD,EAA9B;AACD;AACDyC,0BAAUG,QAAQ5C,EAAlB,IAAwB+C,KAAxB;AACAL,0BAAUnC,IAAV,CAAewC,KAAf;AACD;AACDA,oBAAM3E,KAAN,CAAYmC,IAAZ,CAAiBN,IAAjB;AACD,aApBD,MAoBK;AACH/B,kBAAIE,KAAJ,CAAUmC,IAAV,CAAeN,IAAf;AACD;AACF;;AAED;AA1D8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2D9D,YAAMgD,gBAAgBN,gBAAgB,KAAKlD,QAAL,CAAcyD,UAA9B,GAA2C,CAAjE;AA3D8D;AAAA;AAAA;;AAAA;AA4D9D,gCAAiBR,SAAjB,mIAA2B;AAAA,gBAAnBK,MAAmB;;AACzBA,mBAAMD,KAAN,GAAcC,OAAMD,KAAN,GAAcG,aAA5B;AACD;AA9D6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA+D9D,gCAAiBP,SAAjB,mIAA2B;AAAA,gBAAnBK,OAAmB;;AACzB,gBAAGA,QAAMD,KAAN,GAAc,CAAjB,EAAmB;AAAA;AAAA;AAAA;;AAAA;AACjB,uCAAgBC,QAAM3E,KAAtB,wIAA4B;AAAA,sBAApB6B,KAAoB;;AAC1B/B,sBAAIE,KAAJ,CAAUmC,IAAV,CAAeN,KAAf;AACD;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIlB,aAJD,MAIK;AACH,kBAAIkD,cAAcV,UAAUM,QAAMC,MAAhB,CAAlB;AACA,kBAAGG,eAAeA,YAAYL,KAAZ,IAAqB,CAAvC,EAAyC;AACvCK,4BAAY/E,KAAZ,CAAkBmC,IAAlB,CAAuBwC,OAAvB;AACD,eAFD,MAEK;AACH7E,oBAAIE,KAAJ,CAAUmC,IAAV,CAAewC,OAAf;AACD;AACF;AACF;AA5E6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8E/D;;AAED,aAAO7E,GAAP;AACD;;;sBAhYUH,M,EAAO;AAChB,WAAK0B,QAAL,GAAgB5B,EAAEuF,QAAF,CAAWrF,UAAS,EAApB,EAAwB;AACtC2B,gCAAyB,OADa,EACJ;AAClCK,6BAAsB,IAFgB;AAGtCwC,mBAAY,SAH0B,EAGf;AACvBW,oBAAa,CAJyB;AAKtChD,qBAAc;AALwB,OAAxB,CAAhB;AAOD;;;;;;AA0XHmD,OAAOC,OAAP,GAAiB;AACfxF,YAAUA;AADK,CAAjB","file":"MapMaker.js","sourcesContent":["import {Argument} from 'argdown-parser';\nimport * as _ from 'lodash';\nimport {Node} from './model/Node.js';\nimport {Edge} from './model/Edge.js';\n\nclass MapMaker{\n  constructor(config){\n    this.name = \"MapMaker\";\n    this.config = config;\n  }\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      statementSelectionMode : \"roots\", //options: all | titled | roots | statement-trees | with-relations\n      excludeDisconnected : true,\n      groupMode : \"heading\", //options: heading | tag | none\n      groupDepth : 2,\n      addNodeText : true\n    });\n  }\n  run(data){\n    if(data.config){\n      if(data.config.map){\n        this.config = data.config.map;\n      }else if(data.config.MapMaker){\n        this.config = data.config.MapMaker;\n      }\n    }\n\n    data.map = this.makeMap(data);\n    return data;\n  }\n  makeMap(data){\n    let map = {nodes: [], edges: []};\n    let nodeCount = 0; //used for generating node ids\n    let edgeCount = 0; //used for generating edge ids\n    let statementNodes = {}; //a dictionary of statement nodes. The key is the statement's title\n    let argumentNodes = {}; //a dictionary of argument nodes. The key is the argument's title\n    let relationsForMap = []; //the relations that have to be visualized by edges between nodes in the map (each relation can be represented by more than one edge)\n\n    const untitledTest = /^Untitled/;\n\n    //1) find all statement classes that should be inserted as nodes\n    //2) Add all outgoing relations of each of these statements to the relations to be represented with edges\n    let statementKeys = Object.keys(data.statements);\n    for(let statementKey of statementKeys){\n      let equivalenceClass = data.statements[statementKey];\n      let selectionTest = true;\n\n      let isConnected = equivalenceClass.relations.length > 0 || equivalenceClass.isUsedAsPremise || equivalenceClass.isUsedAsConclusion;\n      let notUsedInArgumentButWithRelations = equivalenceClass.relations.length > 0 && !equivalenceClass.isUsedAsPremise && !equivalenceClass.isUsedAsConclusion;\n      \n      if(this.settings.statementSelectionMode == \"all\"){\n        selectionTest = true;\n      }if(this.settings.statementSelectionMode == \"titled\"){\n        selectionTest = notUsedInArgumentButWithRelations || !untitledTest.exec(equivalenceClass.title);\n      }else if(this.settings.statementSelectionMode == \"roots\"){\n        selectionTest = notUsedInArgumentButWithRelations || equivalenceClass.isUsedAsRootOfStatementTree;\n      }else if(this.settings.statementSelectionMode == \"statement-trees\"){\n        selectionTest = equivalenceClass.isUsedAsRootOfStatementTree || equivalenceClass.isUsedAsChildOfStatementTree;\n      }else if(this.settings.statementSelectionMode == \"with-relations\"){\n        selectionTest = equivalenceClass.relations.length > 0;        \n      }\n      if((!this.settings.excludeDisconnected ||isConnected) && selectionTest){\n        let id = \"n\"+nodeCount;\n        nodeCount++;\n        let node = new Node(\"statement\", statementKey, id);\n        if(this.settings.addNodeText){\n          const lastMember = _.last(equivalenceClass.members);\n          if(lastMember){\n            node.text = lastMember.text;            \n          }\n        }\n        statementNodes[statementKey] = node;\n        map.nodes.push(node)\n\n        //add all outgoing relations of each statement node\n        for(let relation of equivalenceClass.relations){\n          if(relation.from == equivalenceClass && relation.type !== \"contradictory\"){\n            relationsForMap.push(relation);              \n          }else if(relation.type == \"contradictory\" && !_.includes(relationsForMap, relation)){\n            relationsForMap.push(relation);\n          }\n        }\n      }\n    }\n\n    let argumentKeys = Object.keys(data.arguments);\n    let statementRoles = {}; //a dictionary mapping statement titles to {premiseIn:[nodeId], conclusionIn:[nodeId]} objects\n\n    //1) add all (connected) arguments as argument nodes\n    //2) add all outgoing relations of each argument to relationsForMap\n    //3) add all outgoing relations of each main conclusion to relationsForMap, if the conclusion is not represented by a statement node.\n    for(let argumentKey of argumentKeys){\n      let hasRelations = false;\n      let argument = data.arguments[argumentKey];\n      let id = \"n\"+nodeCount;\n      nodeCount++;\n      let node = new Node(\"argument\", argument.title, id);\n      if(this.settings.addNodeText){\n        const lastMember = _.last(argument.descriptions);\n        if(lastMember){\n          node.text = lastMember.text;          \n        }\n      }\n\n      for(let relation of argument.relations){\n        hasRelations = true;\n        //add all outgoing relations from each argument node\n        if(relation.from == argument){\n          relationsForMap.push(relation);\n        }\n      }\n      for(let statement of argument.pcs){\n        let roles = statementRoles[statement.title];\n        let equivalenceClass = data.statements[statement.title];\n        if(!roles){\n          roles = {premiseIn:[], conclusionIn:[]};\n          statementRoles[statement.title] = roles;\n        }\n        if(statementNodes[statement.title]){\n          //argument node has a support relation to statement node\n          hasRelations = true;\n        }\n        if(statement.role == \"premise\"){\n          roles.premiseIn.push(node);\n          for(let relation of equivalenceClass.relations){\n            if(relation.to == equivalenceClass || relation.type == \"contradictory\"){\n              hasRelations = true;\n            }\n          }\n        }else if(statement.role == \"conclusion\" && statement == argument.pcs[argument.pcs.length - 1]){\n          roles.conclusionIn.push(node);\n\n          for(let relation of equivalenceClass.relations){\n            if(relation.from == equivalenceClass){\n              hasRelations = true;\n              //add all outgoing relations of the argument's main conclusion, if the conclusion has not been inserted as a statement node\n              //if the conclusion has been inserted as a statement node, the outgoing relations have already been added\n              if(!statementNodes[statement.title] && (!relation.type == \"contradictory\" ||!_.includes(relationsForMap,relation))){\n                relationsForMap.push(relation);\n              }\n            }else if(relation.type == \"contradictory\" && !_.includes(relationsForMap,relation)){\n              hasRelations = true;\n              relationsForMap.push(relation);\n            }\n          }\n        }\n      }\n      //add argument node\n      if(!this.settings.excludeDisconnected || hasRelations){\n        argumentNodes[argumentKey] = node;\n        map.nodes.push(node);\n      }\n    }\n\n\n    //Create edges representing the selected relations\n    //One relation can be represented by multiple edges in the graph, as the same sentence (the same equivalence class) can be used in several arguments as premise or conclusion.\n    //If a source/target of a relation is a statementNode, all edges, representing the relation, have to start/end at the statementNode.\n    //In the next step, \"implicit\" support edges are added that represent the equivalence relations between statements.\n    //These will connect the different occurrences of a statement (or more precisely the occurrences of an \"equivalence class\") within the graph.\n    for(let relation of relationsForMap){\n      let froms = []; //a list of source nodes for the edges representing the relation in the graph\n      let tos = []; //a list of target nodes for the edges representing the relation in the graph\n\n      let fromNode;\n      let fromStatement;\n\n      if(relation.from instanceof Argument){\n        fromNode = argumentNodes[relation.from.title];\n      }else{\n        fromNode = statementNodes[relation.from.title];\n        fromStatement = data.statements[relation.from.title];\n      }\n\n      if(!fromNode){ //no node representing the source, so look for all arguments that use the source as conclusion\n        let roles = statementRoles[relation.from.title];\n        fromStatement = data.statements[relation.from.title];\n        if(roles){\n          froms.push.apply(froms, roles.conclusionIn);\n        }\n      }else{ //push either the argument node or the statement node to the sources list\n        froms.push(fromNode);\n      }\n\n      let toNode;\n      let toStatement;\n\n      if(relation.to instanceof Argument){\n        toNode = argumentNodes[relation.to.title];\n      }else{\n        toNode = statementNodes[relation.to.title];\n        toStatement = data.statements[relation.to.title];\n      }\n\n      if(!toNode){ //no node representing the target, so look for all arguments that use the target as premise\n        let roles = statementRoles[relation.to.title];\n        toStatement = data.statements[relation.to.title];\n        if(roles){\n          tos.push.apply(tos, roles.premiseIn);\n        }\n      }else{ //push either the argument node or the statement node to the targets list\n        tos.push(toNode);\n      }\n\n      if(relation.type == \"contradictory\"){\n        //special case: both statements of a contradictory are represented as statement nodes\n        //in this case there have to be two attack relations going both ways\n        //we have to add the \"reverse direction\" edge here\n        if(fromNode && toNode && !(fromNode instanceof Argument) && !(toNode instanceof Argument)){\n          let edgeId = 'e'+edgeCount;\n          edgeCount++;\n          let edge = new Edge({\n                      id:edgeId,\n                      from:toNode, //node\n                      to:fromNode, //node\n                      fromStatement: toStatement, //statement\n                      toStatement: fromStatement, //statement\n                      type:\"attack\",\n                      status: \"reconstructed\"\n                    });\n          map.edges.push(edge);         \n        }\n        let fromRoles = statementRoles[relation.from.title];\n        if(fromRoles && fromRoles.premiseIn){\n          for(let argumentNode of fromRoles.premiseIn){\n            for(let to of tos){\n              let edgeId = 'e'+edgeCount;\n              edgeCount++;\n              map.edges.push(new Edge({\n                id:edgeId,\n                from:to,\n                to:argumentNode,\n                fromStatement:toStatement,\n                toStatement: fromStatement,\n                type:\"attack\",\n                status:\"reconstructed\"\n              }));\n            }\n          }\n        }\n\n      }\n      \n      //now add an edge from each source to each target\n      let edgeType = relation.type;\n      if(edgeType == 'contradictory' ||edgeType == 'contrary'){\n        edgeType = 'attack';\n      }else if(edgeType == 'entails'){\n        edgeType = 'support';\n      }\n      for(let from of froms){\n        for(let to of tos){\n          let edgeId = 'e'+edgeCount;\n          edgeCount++;\n          map.edges.push(new Edge({\n            id:edgeId,\n            from:from, //node\n            to:to, //node\n            fromStatement: fromStatement, //statement\n            toStatement: toStatement, //statement\n            type:edgeType,\n            status: relation.status\n          }));\n        }\n      }\n    }\n\n    //Add support edges to represent equivalence relations between sentences or sentence occurrences\n    //1) From all argument nodes that use p as main conclusion to statement node p\n    //2) From statement node p to all arguments that use p as premise\n    for(let node of map.nodes){\n      if(node.type == 'statement'){\n        let roles = statementRoles[node.title];\n        let statement = data.statements[node.title];\n        if(roles){\n          //1) add conclusion +> statementNode edges\n          for(let argumentNode of roles.conclusionIn){\n            let edgeId = 'e'+edgeCount;\n            edgeCount++;\n            map.edges.push(new Edge({\n              id:edgeId,\n              from:argumentNode, //node\n              to:node, //node\n              fromStatement: statement, //statement\n              toStatement: statement, //statement\n              type:'support',\n              status: 'reconstructed'\n            }));\n          }\n\n          //2) add statementNode +> premise edges\n          for(let argumentNode of roles.premiseIn){\n            let edgeId = 'e'+edgeCount;\n            edgeCount++;\n            map.edges.push(new Edge({\n              id:edgeId,\n              from:node, //node\n              to:argumentNode, //node\n              fromStatement: statement, //statement\n              toStatement: statement, //statement\n              type:'support',\n              status: 'reconstructed'\n            }));\n          }\n        }\n      }\n    }\n    \n    //groups\n    //groups are added to map.nodes\n    //nodes contained within a group are removed from map.nodes and pushed into group.nodes instead.\n    //groups within groups are also pushed to group.nodes.\n    if(this.settings.groupMode && this.settings.groupMode != 'none'){\n      const nodeList = map.nodes;\n      map.nodes = [];\n      \n      const groupDict = {};\n      const groupList = [];\n      \n      let maxGroupLevel = 0;\n      \n      for(let node of nodeList){\n        let section = null;\n        if(node.type == \"argument\"){\n          let argument = data.arguments[node.title];\n          if(argument.section){\n            section = argument.section;\n          }else{\n            for(let member of argument.descriptions){\n              if(member.section){\n                section = member.section;\n                break;\n              }\n            }            \n          }\n        }else{\n          let equivalenceClass = data.statements[node.title];\n          for(let member of equivalenceClass.members){\n            if(member.section){\n              section = member.section;\n              break;\n            }\n          }\n        }\n        \n        if(section){\n          if(maxGroupLevel < section.level){\n            maxGroupLevel = section.level;\n          }\n          let group = groupDict[section.id];\n          if(!group){\n            group = {\n              type: \"group\",\n              id:section.id, \n              title: section.title, \n              level: section.level, \n              nodes: []\n            };\n            if(section.parent){\n              group.parent = section.parent.id;\n            }\n            groupDict[section.id] = group;\n            groupList.push(group);\n          }\n          group.nodes.push(node);\n        }else{\n          map.nodes.push(node);\n        }\n      }\n      \n      //normalize group levels\n      const minGroupLevel = maxGroupLevel - this.settings.groupDepth + 1;\n      for(let group of groupList){\n        group.level = group.level - minGroupLevel;\n      }\n      for(let group of groupList){\n        if(group.level < 0){\n          for(let node of group.nodes){\n            map.nodes.push(node);\n          }\n        }else{\n          let parentGroup = groupDict[group.parent];\n          if(parentGroup && parentGroup.level >= 0){\n            parentGroup.nodes.push(group);\n          }else{\n            map.nodes.push(group);\n          }          \n        }\n      }\n      \n    }\n\n    return map;\n  }\n}\nmodule.exports = {\n  MapMaker: MapMaker\n}\n"]}