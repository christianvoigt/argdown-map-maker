{"version":3,"sources":["../../src/MapMaker.js"],"names":["_","MapMaker","config","name","data","map","makeMap","nodes","edges","nodeCount","edgeCount","statementNodes","argumentNodes","relationsForMap","untitledTest","statementKeys","Object","keys","statements","statementKey","equivalenceClass","selectionTest","isConnected","relations","length","isUsedAsPremise","isUsedAsConclusion","notUsedInArgumentButWithRelations","settings","statementSelectionMode","exec","title","isUsedAsRootOfStatementTree","isUsedAsChildOfStatementTree","excludeDisconnected","id","node","push","relation","from","type","includes","argumentKeys","arguments","statementRoles","argumentKey","hasRelations","argument","pcs","statement","roles","premiseIn","conclusionIn","role","to","froms","tos","fromNode","fromStatement","apply","toNode","toStatement","edgeId","edge","status","fromRoles","argumentNode","edgeType","defaults","module","exports"],"mappings":"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","file":"MapMaker.js","sourcesContent":["import {Argument} from 'argdown-parser';\nimport * as _ from 'lodash';\nimport {Node} from './model/Node.js';\nimport {Edge} from './model/Edge.js';\n\nclass MapMaker{\n  constructor(config){\n    this.name = \"MapMaker\";\n    this.config = config;\n  }\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      statementSelectionMode : \"roots\", //options: all | titled | roots | statement-trees | with-relations\n      excludeDisconnected : true\n    });\n  }\n  run(data){\n    data.map = this.makeMap(data);\n    return data;\n  }\n  makeMap(data){\n    let map = {nodes: [], edges: []};\n    let nodeCount = 0; //used for generating node ids\n    let edgeCount = 0; //used for generating edge ids\n    let statementNodes = {}; //a dictionary of statement nodes. The key is the statement's title\n    let argumentNodes = {}; //a dictionary of argument nodes. The key is the argument's title\n    let relationsForMap = []; //the relations that have to be visualized by edges between nodes in the map (each relation can be represented by more than one edge)\n\n    const untitledTest = /^Untitled/;\n\n    //1) find all statement classes that should be inserted as nodes\n    //2) Add all outgoing relations of each of these statements to the relations to be represented with edges\n    let statementKeys = Object.keys(data.statements);\n    for(let statementKey of statementKeys){\n      let equivalenceClass = data.statements[statementKey];\n      let selectionTest = true;\n\n      let isConnected = equivalenceClass.relations.length > 0 || equivalenceClass.isUsedAsPremise || equivalenceClass.isUsedAsConclusion;\n      let notUsedInArgumentButWithRelations = equivalenceClass.relations.length > 0 && !equivalenceClass.isUsedAsPremise && !equivalenceClass.isUsedAsConclusion;\n      \n      if(this.settings.statementSelectionMode == \"all\"){\n        selectionTest = true;\n      }if(this.settings.statementSelectionMode == \"titled\"){\n        selectionTest = notUsedInArgumentButWithRelations || !untitledTest.exec(equivalenceClass.title);\n      }else if(this.settings.statementSelectionMode == \"roots\"){\n        selectionTest = notUsedInArgumentButWithRelations || equivalenceClass.isUsedAsRootOfStatementTree;\n      }else if(this.settings.statementSelectionMode == \"statement-trees\"){\n        selectionTest = equivalenceClass.isUsedAsRootOfStatementTree || equivalenceClass.isUsedAsChildOfStatementTree;\n      }else if(this.settings.statementSelectionMode == \"with-relations\"){\n        selectionTest = equivalenceClass.relations.length > 0;        \n      }\n      if((!this.settings.excludeDisconnected ||isConnected) && selectionTest){\n        let id = \"n\"+nodeCount;\n        nodeCount++;\n        let node = new Node(\"statement\", statementKey, id);\n        statementNodes[statementKey] = node;\n        map.nodes.push(node)\n\n        //add all outgoing relations of each statement node\n        for(let relation of equivalenceClass.relations){\n          if(relation.from == equivalenceClass && relation.type !== \"contradictory\"){\n            relationsForMap.push(relation);              \n          }else if(relation.type == \"contradictory\" && !_.includes(relationsForMap, relation)){\n            relationsForMap.push(relation);\n          }\n        }\n      }\n    }\n\n    let argumentKeys = Object.keys(data.arguments);\n    let statementRoles = {}; //a dictionary mapping statement titles to {premiseIn:[nodeId], conclusionIn:[nodeId]} objects\n\n    //1) add all (connected) arguments as argument nodes\n    //2) add all outgoing relations of each argument to relationsForMap\n    //3) add all outgoing relations of each main conclusion to relationsForMap, if the conclusion is not represented by a statement node.\n    for(let argumentKey of argumentKeys){\n      let hasRelations = false;\n      let argument = data.arguments[argumentKey];\n      let id = \"n\"+nodeCount;\n      nodeCount++;\n      let node = new Node(\"argument\", argument.title, id);\n\n      for(let relation of argument.relations){\n        hasRelations = true;\n        //add all outgoing relations from each argument node\n        if(relation.from == argument){\n          relationsForMap.push(relation);\n        }\n      }\n      for(let statement of argument.pcs){\n        let roles = statementRoles[statement.title];\n        let equivalenceClass = data.statements[statement.title];\n        if(!roles){\n          roles = {premiseIn:[], conclusionIn:[]};\n          statementRoles[statement.title] = roles;\n        }\n        if(statementNodes[statement.title]){\n          //argument node has a support relation to statement node\n          hasRelations = true;\n        }\n        if(statement.role == \"premise\"){\n          roles.premiseIn.push(node);\n          for(let relation of equivalenceClass.relations){\n            if(relation.to == equivalenceClass || relation.type == \"contradictory\"){\n              hasRelations = true;\n            }\n          }\n        }else if(statement.role == \"conclusion\" && statement == argument.pcs[argument.pcs.length - 1]){\n          roles.conclusionIn.push(node);\n\n          for(let relation of equivalenceClass.relations){\n            if(relation.from == equivalenceClass){\n              hasRelations = true;\n              //add all outgoing relations of the argument's main conclusion, if the conclusion has not been inserted as a statement node\n              //if the conclusion has been inserted as a statement node, the outgoing relations have already been added\n              if(!statementNodes[statement.title] && (!relation.type == \"contradictory\" ||!_.includes(relationsForMap,relation))){\n                relationsForMap.push(relation);\n              }\n            }else if(relation.type == \"contradictory\" && !_.includes(relationsForMap,relation)){\n              hasRelations = true;\n              relationsForMap.push(relation);\n            }\n          }\n        }\n      }\n      //add argument node\n      if(!this.settings.excludeDisconnected || hasRelations){\n        argumentNodes[argumentKey] = node;\n        map.nodes.push(node);\n      }\n    }\n\n\n    //Create edges representing the selected relations\n    //One relation can be represented by multiple edges in the graph, as the same sentence (the same equivalence class) can be used in several arguments as premise or conclusion.\n    //If a source/target of a relation is a statementNode, all edges, representing the relation, have to start/end at the statementNode.\n    //In the next step, \"implicit\" support edges are added that represent the equivalence relations between statements.\n    //These will connect the different occurrences of a statement (or more precisely the occurrences of an \"equivalence class\") within the graph.\n    for(let relation of relationsForMap){\n      let froms = []; //a list of source nodes for the edges representing the relation in the graph\n      let tos = []; //a list of target nodes for the edges representing the relation in the graph\n\n      let fromNode;\n      let fromStatement;\n\n      if(relation.from instanceof Argument){\n        fromNode = argumentNodes[relation.from.title];\n      }else{\n        fromNode = statementNodes[relation.from.title];\n        fromStatement = data.statements[relation.from.title];\n      }\n\n      if(!fromNode){ //no node representing the source, so look for all arguments that use the source as conclusion\n        let roles = statementRoles[relation.from.title];\n        fromStatement = data.statements[relation.from.title];\n        if(roles){\n          froms.push.apply(froms, roles.conclusionIn);\n        }\n      }else{ //push either the argument node or the statement node to the sources list\n        froms.push(fromNode);\n      }\n\n      let toNode;\n      let toStatement;\n\n      if(relation.to instanceof Argument){\n        toNode = argumentNodes[relation.to.title];\n      }else{\n        toNode = statementNodes[relation.to.title];\n        toStatement = data.statements[relation.to.title];\n      }\n\n      if(!toNode){ //no node representing the target, so look for all arguments that use the target as premise\n        let roles = statementRoles[relation.to.title];\n        toStatement = data.statements[relation.to.title];\n        if(roles){\n          tos.push.apply(tos, roles.premiseIn);\n        }\n      }else{ //push either the argument node or the statement node to the targets list\n        tos.push(toNode);\n      }\n\n      if(relation.type == \"contradictory\"){\n        //special case: both statements of a contradictory are represented as statement nodes\n        //in this case there have to be two attack relations going both ways\n        //we have to add the \"reverse direction\" edge here\n        if(fromNode && toNode && !(fromNode instanceof Argument) && !(toNode instanceof Argument)){\n          let edgeId = 'e'+edgeCount;\n          edgeCount++;\n          let edge = new Edge({\n                      id:edgeId,\n                      from:toNode, //node\n                      to:fromNode, //node\n                      fromStatement: toStatement, //statement\n                      toStatement: fromStatement, //statement\n                      type:\"attack\",\n                      status: \"reconstructed\"\n                    });\n          map.edges.push(edge);         \n        }\n        let fromRoles = statementRoles[relation.from.title];\n        if(fromRoles && fromRoles.premiseIn){\n          for(let argumentNode of fromRoles.premiseIn){\n            for(let to of tos){\n              let edgeId = 'e'+edgeCount;\n              edgeCount++;\n              map.edges.push(new Edge({\n                id:edgeId,\n                from:to,\n                to:argumentNode,\n                fromStatement:toStatement,\n                toStatement: fromStatement,\n                type:\"attack\",\n                status:\"reconstructed\"\n              }));\n            }\n          }\n        }\n\n      }\n      \n      //now add an edge from each source to each target\n      let edgeType = relation.type;\n      if(edgeType == \"contradictory\" || edgeType == \"contrary\"){\n        edgeType = \"attack\";\n      }else if(edgeType == \"entails\"){\n        edgeType = \"support\";\n      }\n      for(let from of froms){\n        for(let to of tos){\n          let edgeId = 'e'+edgeCount;\n          edgeCount++;\n          map.edges.push(new Edge({\n            id:edgeId,\n            from:from, //node\n            to:to, //node\n            fromStatement: fromStatement, //statement\n            toStatement: toStatement, //statement\n            type:edgeType,\n            status: relation.status\n          }));\n        }\n      }\n    }\n\n    //Add support edges to represent equivalence relations between sentences or sentence occurrences\n    //1) From all argument nodes that use p as main conclusion to statement node p\n    //2) From statement node p to all arguments that use p as premise\n    for(let node of map.nodes){\n      if(node.type == \"statement\"){\n        let roles = statementRoles[node.title];\n        let statement = data.statements[node.title];\n        if(roles){\n          //1) add conclusion +> statementNode edges\n          for(let argumentNode of roles.conclusionIn){\n            let edgeId = 'e'+edgeCount;\n            edgeCount++;\n            map.edges.push(new Edge({\n              id:edgeId,\n              from:argumentNode, //node\n              to:node, //node\n              fromStatement: statement, //statement\n              toStatement: statement, //statement\n              type:\"support\",\n              status: \"reconstructed\"\n            }));\n          }\n\n          //2) add statementNode +> premise edges\n          for(let argumentNode of roles.premiseIn){\n            let edgeId = 'e'+edgeCount;\n            edgeCount++;\n            map.edges.push(new Edge({\n              id:edgeId,\n              from:node, //node\n              to:argumentNode, //node\n              fromStatement: statement, //statement\n              toStatement: statement, //statement\n              type:\"support\",\n              status: \"reconstructed\"\n            }));\n          }\n        }\n      }\n    }\n\n    return map;\n  }\n}\nmodule.exports = {\n  MapMaker: MapMaker\n}\n"]}