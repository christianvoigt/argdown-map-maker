{"version":3,"sources":["../../src/DagreD3SvgExport.js"],"names":[],"mappingsfile":"DagreD3SvgExport.js","sourcesContent":["// import * as dagreD3 from 'dagre-d3'\n// const d3 = require('d3')\n// const phantom = require('phantom');\n// const EventEmitter = require('events');\n// var eventEmitter = new EventEmitter()\n\n// import * as _ from 'lodash';\n// const timeout = ms => new Promise(res => setTimeout(res, ms))\n// const loadSvg = async function (g) {\n//     console.log(\"loadSvg1\");\n//     // const instance = await phantom.create();\n//     // console.log(\"loadSvg2\");\n//     await timeout(5000)\n//     console.log(\"loadSvg3\");\n//     // const page = await instance.createPage();\n//     // await page.property('content', '<html><body></body></html>');\n//     // console.log(\"loadSvg4\");\n//     // let html = await page.evaluate(function () {\n//     //     //let body = d3.select(dom.window.document).select('body'); //get d3 into the dom\n//     //     const htmlBody = d3.select(document.body);\n//     //     let svgContainer = htmlBody.append('div');\n//     //     svgContainer.attr('class', 'container')\n//     //     let svg = svgContainer.append(\"svg\");\n//     //     svg.attr(\"width\", 1280)\n//     //         .attr(\"height\", 1024)\n//     //         .attr({\n//     //             xmlns: 'http://www.w3.org/2000/svg'\n//     //         });\n//     //     let svgGroup = svg.append('g');\n\n//     //     // const layout = dagreD3.layout().rankSep(50).rankDir('BT')\n//     //     // console.log('svg ' + svg)\n//     //     // console.log('svgGroup ' + svgGroup)\n\n//     //     var zoom = d3.zoom().on('zoom', function () {\n//     //         svgGroup.attr('transform', 'translate(' + d3.event.translate + ')' + 'scale(' + d3.event.scale + ')')\n//     //     })\n//     //     svg.call(zoom)\n\n//     //     // Run the renderer. This is what draws the final graph.\n//     //     dagreRender(svgGroup, g)\n//     //     // renderer.layout(layout).run(svgGroup, g)\n//     //     // Center the graph\n//     //     let initialScale = 0.75\n//     //     let getSvgWidth = function () {\n//     //         let positionInfo = svg.node().getBoundingClientRect()\n//     //         return positionInfo.width\n//     //     }\n//     //     zoom\n//     //         .translate([(getSvgWidth() - g.graph().width * initialScale) / 2, 20])\n//     //         .scale(initialScale)\n//     //         .event(svg)\n//     //     svgGroup.attr('height', g.graph().height * initialScale + 40)\n\n//     //     //write out the children of the container div\n//     //     return window.d3.select('.container').html() //using sync to keep the code simple\n//     // })\n//     // console.log(\"loadSvg5\");\n//     // await instance.exit();\n//     // return html;\n//     eventEmitter.emit('myevent', { something: \"Bla\" });\n//     return \"test\";\n// };\n\n// class DagreD3SvgExport {\n//     set config(config) {\n//         let previousSettings = this.settings;\n//         if (!previousSettings) {\n//             previousSettings = {\n//                 rankDir: 'BT',\n//                 rankSep: 50,\n//                 nodeSep: 70,\n//                 marginx: 20,\n//                 marginy: 20,\n//             };\n//         }\n//         this.settings = _.defaultsDeep({}, config, previousSettings);\n//     }\n//     constructor(config) {\n//         this.name = \"DagreD3SvgExport\";\n//         this.config = config;\n//     }\n//     run(data) {\n//         if (data.config) {\n//             if (data.config.dagre) {\n//                 this.config = data.config.dagre;\n//             } else if (data.config.DagreD3SvgExport) {\n//                 this.config = data.config.DagreD3SvgExport;\n//             }\n//         }\n//         if (!data.map ||!data.map.nodes ||!data.map.edges) {\n//             return data;\n//         }\n//         data.svg = this.generateSvg(data.map);\n//         return data;\n//     }\n//     generateSvg(map) {\n//         const g = new dagreD3.graphlib.Graph({ compound: true })\n//             .setGraph({\n//                 rankdir: this.settings.rankDir,\n//                 rankSep: this.settings.rankSep,\n//                 nodeSep: this.settings.nodeSep,\n//                 marginx: this.settings.marginx,\n//                 marginy: this.settings.marginy\n//             })\n//             .setDefaultEdgeLabel(function () { return {} })\n\n//         for (let node of map.nodes) {\n//             this.addNode(node, g)\n//         }\n\n//         for (let edge of map.edges) {\n//             g.setEdge(edge.from.id, edge.to.id, { class: edge.type })\n//         }\n\n//         const nodes = g.nodes()\n\n//         for (let v of nodes) {\n//             const node = g.node(v)\n//             // Round the corners of the nodes\n//             node.rx = node.ry = 5\n//         }\n//         // Create the renderer\n//         const render = new dagreD3.render() // eslint-disable-line new-cap\n//         eventEmitter.on('myevent', function (myResult) {\n//             // I needed the result to be written to stdout so that the calling process could get it\n//             console.log(JSON.stringify(myResult));\n//         });        \n//         return loadSvg(g, render).then(svg => { console.log(\"SVG: \" + svg) }, (e) => { console.log(\"Error: \" +e)});\n//     }\n//     addNode(node, g, currentGroup) {\n//         const nodeProperties = {\n//             labelType: 'html',\n//             class: node.type,\n//             paddingBottom: 0,\n//             paddingTop: 0,\n//             paddingLeft: 0,\n//             paddingRight: 0\n//         }\n//         nodeProperties.label = '<div class=\"node-label\">'\n//         if (node.labelTitle) {\n//             nodeProperties.label += '<h3>' + node.labelTitle + '</h3>'\n//         }\n//         if (node.labelText && (node.type === 'statement' || node.type === 'argument')) {\n//             nodeProperties.label += '<p>' + node.labelText + '</p>'\n//         }\n//         if (node.tags) {\n//             for (let tag of node.tags) {\n//                 nodeProperties.class += ' '\n//                 nodeProperties.class += this.$store.getters.tagsDictionary[tag].cssClass\n//             }\n//         }\n//         nodeProperties.label += '</div>'\n\n//         if (node.type === 'group') {\n//             nodeProperties.clusterLabelPos = 'top'\n//             nodeProperties.class += ' level-' + node.level\n//         }\n//         g.setNode(node.id, nodeProperties)\n//         if (currentGroup) {\n//             g.setParent(node.id, currentGroup.id)\n//         }\n//         if (node.type === 'group') {\n//             for (let child of node.nodes) {\n//                 this.addNode(child, g, node)\n//             }\n//         }\n//     }\n// }\n// module.exports = {\n//     DagreD3SvgExport: DagreD3SvgExport\n// }\n"]}