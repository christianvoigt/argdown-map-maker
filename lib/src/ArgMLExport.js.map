{"version":3,"sources":["../../src/ArgMLExport.js"],"names":["_","builder","require","Chance","chance","ArgMLExport","config","settings","defaults","convertToString","name","data","argml","create","version","encoding","standalone","a","e","graph","statementArgMLIds","argumentArgMLIds","nodesByTitle","map","nodes","node","title","type","argmlId","getId","argument","arguments","pcs","statement","nodeEl","id","argDataEl","statements","thesisEl","up","lastMember","last","members","text","shapeNode","x","lastDescriptionStatement","descriptions","description","argEl","i","length","equivalenceClass","propositionType","role","edges","edge","edgeEl","source","from","target","to","edgeType","edgeColor","status","argEdgeAttributes","fromStatement","sourcePropositionId","toStatement","targetPropositionId","polyLineEdge","end","pretty","indent","newline","allowEmpty","natural","min","max","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;;;;;AACZ;AACA,IAAIC,UAAUC,QAAQ,YAAR,CAAd;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,SAAS,IAAID,MAAJ,EAAb;;IAEME,W;;;sBACOC,M,EAAO;AAChB,WAAKC,QAAL,GAAgBP,EAAEQ,QAAF,CAAWF,UAAS,EAApB,EAAwB;AACtCG,yBAAiB;AADqB,OAAxB,CAAhB;AAGD;;;AACD,uBAAYH,MAAZ,EAAmB;AAAA;;AACjB,SAAKI,IAAL,GAAY,aAAZ;AACA,SAAKJ,MAAL,GAAcA,MAAd;AACD;;;;wBACGK,I,EAAK;AACP,UAAGA,KAAKL,MAAR,EAAe;AACb,YAAGK,KAAKL,MAAL,CAAYM,KAAf,EAAqB;AACnB,eAAKN,MAAL,GAAcK,KAAKL,MAAL,CAAYM,KAA1B;AACD,SAFD,MAEM,IAAGD,KAAKL,MAAL,CAAYD,WAAf,EAA2B;AAC/B,eAAKC,MAAL,GAAcK,KAAKL,MAAL,CAAYD,WAA1B;AACD;AACF;;AAED,UAAIO,QAAQX,QAAQY,MAAR,CAAe,SAAf,EAAyB,EAACC,SAAS,KAAV;AACzCC,kBAAU,OAD+B;AAEzCC,oBAAY,IAF6B,EAAzB,EAGTC,CAHS,CAGP,OAHO,EAGG,uCAHH,EAITA,CAJS,CAIP,WAJO,EAIO,6CAJP,EAKTA,CALS,CAKP,WALO,EAKO,2CALP,EAMTA,CANS,CAMP,SANO,EAMM,mCANN,EAOTA,CAPS,CAOP,oBAPO,EAOgB,iJAPhB,CAAZ;;AASEL,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,qBAAe,YADH;AAEZ,cAAO;AAFK,OAAd;AAIAN,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,eAAQ,SADI;AAEZ,uBAAiB,WAFL;AAGZ,cAAO;AAHK,OAAd;AAKAN,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,qBAAe,UADH;AAEZ,eAAQ,MAFI;AAGZ,cAAO;AAHK,OAAd;AAKAN,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,eAAQ,MADI;AAEZ,uBAAiB,cAFL;AAGZ,cAAO;AAHK,OAAd;AAKAN,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,qBAAc,UADF;AAEZ,eAAS,MAFG;AAGZ,cAAO;AAHK,OAAd;AAKAN,YAAMM,CAAN,CAAQ,KAAR,EAAc;AACZ,eAAQ,MADI;AAEZ,uBAAiB,cAFL;AAGZ,cAAO;AAHK,OAAd;;AAMF,UAAIC,QAAQP,MAAMM,CAAN,CAAQ,OAAR,EAAgB;AAC1B,uBAAgB,UADU;AAE1B,cAAO;AAFmB,OAAhB,CAAZ;;AAKA,UAAIE,oBAAoB,EAAxB;AACA,UAAIC,mBAAmB,EAAvB;AACA,UAAIC,eAAe,EAAnB;AACA;AACA;AAzDO;AAAA;AAAA;;AAAA;AA0DP,6BAAgBX,KAAKY,GAAL,CAASC,KAAzB,8HAA+B;AAAA,cAAvBC,IAAuB;;AAC7BH,uBAAaG,KAAKC,KAAlB,IAA2BD,IAA3B;AACA,cAAGA,KAAKE,IAAL,IAAa,WAAhB,EAA4B;AAC1BF,iBAAKG,OAAL,GAAeR,kBAAkBK,KAAKC,KAAvB,CAAf;AACA,gBAAG,CAACD,KAAKG,OAAT,EAAiB;AACbH,mBAAKG,OAAL,GAAe,KAAKC,KAAL,EAAf;AACAT,gCAAkBK,KAAKC,KAAvB,IAAgCD,KAAKG,OAArC;AACH;AACF,WAND,MAMM,IAAGH,KAAKE,IAAL,IAAa,UAAhB,EAA2B;AAC/BF,iBAAKG,OAAL,GAAeP,iBAAiBI,KAAKC,KAAtB,CAAf;AACA,gBAAG,CAACD,KAAKG,OAAT,EAAiB;AACbH,mBAAKG,OAAL,GAAe,KAAKC,KAAL,EAAf;AACAR,+BAAiBI,KAAKC,KAAtB,IAA+BD,KAAKG,OAApC;AACH;;AAED,gBAAIE,WAAWnB,KAAKoB,SAAL,CAAeN,KAAKC,KAApB,CAAf;AAP+B;AAAA;AAAA;;AAAA;AAQ/B,oCAAqBI,SAASE,GAA9B,mIAAkC;AAAA,oBAA1BC,SAA0B;;AAChC,oBAAIL,UAAUR,kBAAkBa,UAAUP,KAA5B,CAAd;AACA,oBAAG,CAACE,OAAJ,EAAY;AACRA,4BAAU,KAAKC,KAAL,EAAV;AACAT,oCAAkBa,UAAUP,KAA5B,IAAqCE,OAArC;AACH;AACF;AAd8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAehC;AACF;AAlFM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAoFP,8BAAgBjB,KAAKY,GAAL,CAASC,KAAzB,mIAA+B;AAAA,cAAvBC,KAAuB;;AAC7B,cAAIS,SAASf,MAAMD,CAAN,CAAQ,MAAR,EAAe,EAACiB,IAAIV,MAAKU,EAAV,EAAf,CAAb;AACA,cAAIC,YAAYF,OAAOhB,CAAP,CAAS,MAAT,EAAgB,EAAC,OAAM,IAAP,EAAhB,CAAhB;;AAEA,cAAGO,MAAKE,IAAL,IAAa,WAAhB,EAA4B;AAC1B,gBAAIM,aAAYtB,KAAK0B,UAAL,CAAgBZ,MAAKC,KAArB,CAAhB;AACA,gBAAIY,WAAWF,UAAUlB,CAAV,CAAY,YAAZ,EAAyB,EAAC,MAAKO,MAAKG,OAAX,EAAoB,cAAa,GAAjC,EAAzB,EAAgEV,CAAhE,CAAkE,WAAlE,EAA+E,IAA/E,EAAqFe,WAAUP,KAA/F,EAAsGa,EAAtG,EAAf;AACA,gBAAIC,aAAaxC,EAAEyC,IAAF,CAAOR,WAAUS,OAAjB,CAAjB;AACAJ,qBAASpB,CAAT,CAAW,aAAX,EAA0B,IAA1B,EAAgCsB,WAAWG,IAA3C;AACA,gBAAIC,YAAYV,OAAOhB,CAAP,CAAS,MAAT,EAAgB,EAAC,OAAM,IAAP,EAAhB,EAA8BA,CAA9B,CAAgC,aAAhC,CAAhB;AACA0B,sBAAU1B,CAAV,CAAY,YAAZ,EAAyB;AACvB,uBAAQ,OADe;AAEvB,mBAAI,GAFmB;AAGvB,mBAAI;AAHmB,aAAzB;AAKA0B,sBAAU1B,CAAV,CAAY,QAAZ,EAAqB;AACnB,uBAAQ,SADW;AAEnB,6BAAc;AAFK,aAArB;AAIA0B,sBAAU1B,CAAV,CAAY,eAAZ,EAA4B;AAC1B,uBAAQ,SADkB;AAE1B,sBAAO,MAFmB;AAG1B,uBAAQ;AAHkB,aAA5B;AAKA0B,sBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,YAFO;AAGxB,+BAAgB,eAHQ;AAIxB,4BAAa,QAJW;AAKxB,0BAAW,IALa;AAMxB,2BAAY,OANY;AAOxB,oCAAqB,OAPG;AAQxB,8BAAe,OARS;AASxB,wBAAS,KATe;AAUxB,2BAAY,UAVY;AAWxB,+BAAgB,GAXQ;AAYxB,2BAAY,SAZY;AAaxB,yBAAU,MAbc;AAcxB,uBAAQ,OAdgB;AAexB2B,iBAAE;AAfsB,aAA1B;AAiBAD,sBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,SAFO;AAGxB,4BAAa,OAHW;AAIxB,0BAAW,IAJa;AAKxB,2BAAY,MALY;AAMxB,oCAAqB,OANG;AAOxB,8BAAe,OAPS;AAQxB,2BAAY,UARY;AASxB,+BAAgB,GATQ;AAUxB,2BAAY,SAVY;AAWxB,yBAAU,MAXc;AAYxB,uBAAQ,OAZgB;AAaxB,mBAAI;AAboB,aAA1B,EAcEO,MAAKC,KAdP;;AAgBAkB,sBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,SAFO;AAGxB,4BAAa,OAHW;AAIxB,0BAAW,IAJa;AAKxB,2BAAY,OALY;AAMxB,oCAAqB,OANG;AAOxB,8BAAe,OAPS;AAQxB,2BAAY,UARY;AASxB,+BAAgB,GATQ;AAUxB,2BAAY,SAVY;AAWxB,yBAAU,MAXc;AAYxB,uBAAQ,OAZgB;AAaxB,mBAAI;AAboB,aAA1B,EAcEsB,WAAWG,IAdb;AAeAC,sBAAU1B,CAAV,CAAY,SAAZ,EAAsB,EAAC,QAAO,gBAAR,EAAtB;AAED,WAtED,MAsEM,IAAGO,MAAKE,IAAL,IAAa,UAAhB,EAA2B;AAC/B,gBAAIG,YAAWnB,KAAKoB,SAAL,CAAeN,MAAKC,KAApB,CAAf;AACA,gBAAIoB,2BAA2B9C,EAAEyC,IAAF,CAAOX,UAASiB,YAAT,CAAsBL,OAA7B,CAA/B;AACA,gBAAIM,cAAeF,wBAAD,GAA2BA,yBAAyBH,IAApD,GAA2D,EAA7E;AACA,gBAAIM,QAAQb,UAAUlB,CAAV,CAAY,cAAZ,EAA2B;AACrC,oBAAOO,MAAKG,OADyB;AAErC,4BAAe;AAFsB,aAA3B,EAGTV,CAHS,CAGP,WAHO,EAGK,IAHL,EAGUY,UAASJ,KAHnB,EAG0Ba,EAH1B,EAAZ;AAIAU,kBAAM/B,CAAN,CAAQ,iBAAR,EAA2B,IAA3B,EAAiC8B,WAAjC;AACA,iBAAI,IAAIE,IAAI,CAAZ,EAAeA,IAAIpB,UAASE,GAAT,CAAamB,MAAhC,EAAwCD,GAAxC,EAA4C;AAC1C,kBAAIjB,cAAYH,UAASE,GAAT,CAAakB,CAAb,CAAhB;AACA,kBAAIE,mBAAmBzC,KAAK0B,UAAL,CAAgBJ,YAAUP,KAA1B,CAAvB;AACA,kBAAIc,cAAaxC,EAAEyC,IAAF,CAAOW,iBAAiBV,OAAxB,CAAjB;AACA,kBAAIW,kBAAkB,SAAtB;AACA,kBAAIzB,WAAUR,kBAAkBa,YAAUP,KAA5B,CAAd;;AAEA,kBAAGO,YAAUqB,IAAV,IAAkB,YAArB,EAAkC;AAChC,oBAAGJ,KAAKpB,UAASE,GAAT,CAAamB,MAAb,GAAsB,CAA9B,EAAgC;AAC9BE,oCAAkB,YAAlB;AACD,iBAFD,MAEK;AACHA,oCAAkB,uBAAlB;AACD;AACF;AACDJ,oBAAM/B,CAAN,CAAQ,iBAAR,EAA0B;AACxB,sBAAOU,QADiB;AAExB,wBAASyB;AAFe,eAA1B,EAGGnC,CAHH,CAGK,aAHL,EAGoB,IAHpB,EAG0BsB,YAAWG,IAHrC;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD,gBAAIC,aAAYV,OAAOhB,CAAP,CAAS,MAAT,EAAgB,EAAC,OAAM,IAAP,EAAhB,EAA8BA,CAA9B,CAAgC,aAAhC,CAAhB;AACA0B,uBAAU1B,CAAV,CAAY,YAAZ,EAAyB;AACvB,uBAAS,KADc;AAEvB,mBAAI,GAFmB;AAGvB,mBAAI;AAHmB,aAAzB;AAKA0B,uBAAU1B,CAAV,CAAY,QAAZ,EAAqB;AACnB,uBAAQ,SADW;AAEnB,wBAAS,SAFU;AAGnB,6BAAc;AAHK,aAArB;AAKA0B,uBAAU1B,CAAV,CAAY,eAAZ,EAA4B;AAC1B,uBAAQ,SADkB;AAE1B,sBAAO,MAFmB;AAG1B,uBAAQ;AAHkB,aAA5B;AAKA0B,uBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,YAFO;AAGxB,+BAAgB,eAHQ;AAIxB,4BAAa,QAJW;AAKxB,0BAAW,IALa;AAMxB,2BAAY,OANY;AAOxB,oCAAqB,OAPG;AAQxB,8BAAe,OARS;AASxB,wBAAS,KATe;AAUxB,2BAAY,UAVY;AAWxB,+BAAgB,GAXQ;AAYxB,2BAAY,SAZY;AAaxB,yBAAU,MAbc;AAcxB,uBAAQ,OAdgB;AAexB,mBAAI;AAfoB,aAA1B;AAiBA0B,uBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,SAFO;AAGxB,4BAAa,OAHW;AAIxB,0BAAW,IAJa;AAKxB,2BAAY,MALY;AAMxB,oCAAqB,OANG;AAOxB,8BAAe,OAPS;AAQxB,2BAAY,UARY;AASxB,+BAAgB,GATQ;AAUxB,2BAAY,SAVY;AAWxB,yBAAU,MAXc;AAYxB,uBAAQ,MAZgB;AAaxB2B,iBAAE;AAbsB,aAA1B,EAcGpB,MAAKC,KAdR;;AAgBAkB,uBAAU1B,CAAV,CAAY,aAAZ,EAA0B;AACxB,2BAAY,QADY;AAExB,gCAAiB,SAFO;AAGxB,4BAAa,OAHW;AAIxB,0BAAW,IAJa;AAKxB,2BAAY,OALY;AAMxB,oCAAqB,OANG;AAOxB,8BAAe,OAPS;AAQxB,2BAAY,UARY;AASxB,+BAAgB,GATQ;AAUxB,2BAAY,SAVY;AAWxB,yBAAU,MAXc;AAYxB,uBAAQ,OAZgB;AAaxB,mBAAI;AAboB,aAA1B,EAcG8B,WAdH;AAeAJ,uBAAU1B,CAAV,CAAY,SAAZ,EAAsB,EAAC,QAAO,gBAAR,EAAtB;AAED;AACF;AApTM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAsTP,8BAAgBP,KAAKY,GAAL,CAASgC,KAAzB,mIAA+B;AAAA,cAAvBC,IAAuB;;AAC7B,cAAIC,SAAStC,MAAMD,CAAN,CAAQ,MAAR,EAAe,EAACiB,IAAGqB,KAAKrB,EAAT,EAAauB,QAAOF,KAAKG,IAAL,CAAUxB,EAA9B,EAAkCyB,QAAOJ,KAAKK,EAAL,CAAQ1B,EAAjD,EAAf,CAAb;AACA,cAAI2B,iBAAJ;AACA,cAAIC,YAAY,SAAhB;AACA,cAAGP,KAAK7B,IAAL,IAAa,QAAhB,EAAyB;AACvBoC,wBAAY,SAAZ;AACA,gBAAGP,KAAKQ,MAAL,IAAe,UAAlB,EAA6B;AAC3BF,yBAAW,gBAAX;AACD,aAFD,MAEK;AACHA,yBAAW,QAAX;AACD;AACF,WAPD,MAOM,IAAGN,KAAK7B,IAAL,IAAa,SAAhB,EAA0B;AAC9B,gBAAG6B,KAAKQ,MAAL,IAAe,UAAlB,EAA6B;AAC3BF,yBAAW,iBAAX;AACD,aAFD,MAEK;AACHA,yBAAW,SAAX;AACD;AACF;AACD,cAAIG,oBAAoB;AACtB,4BAAgBT,KAAKG,IAAL,CAAU/B,OADJ;AAEtB,4BAAgB4B,KAAKK,EAAL,CAAQjC,OAFF;AAGtB,oBAAQkC;AAHc,WAAxB;AAKA,cAAGN,KAAKU,aAAR,EAAsB;AACpBD,8BAAkBE,mBAAlB,GAAwC/C,kBAAkBoC,KAAKU,aAAL,CAAmBxC,KAArC,CAAxC;AACD;AACD,cAAG8B,KAAKY,WAAR,EAAoB;AAClBH,8BAAkBI,mBAAlB,GAAwCjD,kBAAkBoC,KAAKY,WAAL,CAAiB1C,KAAnC,CAAxC;AACD;AACD+B,iBAAOvC,CAAP,CAAS,MAAT,EAAgB,EAAC,OAAM,IAAP,EAAhB,EAA8BA,CAA9B,CAAgC,UAAhC,EAA4C+C,iBAA5C;;AAEA,cAAIK,eAAeb,OAAOvC,CAAP,CAAS,MAAT,EAAgB,EAAC,OAAM,IAAP,EAAhB,EAA8BA,CAA9B,CAAgC,gBAAhC,CAAnB;AACAoD,uBAAapD,CAAb,CAAe,aAAf,EAA6B;AAC3B,qBAAQ6C,SADmB;AAE3B,oBAAO,MAFoB;AAG3B,qBAAQ;AAHmB,WAA7B;AAKAO,uBAAapD,CAAb,CAAe,QAAf,EAAwB;AACtB,kBAAK,GADiB;AAEtB,kBAAK,GAFiB;AAGtB,kBAAK,GAHiB;AAItB,kBAAK;AAJiB,WAAxB,EAKGA,CALH,CAKK,SALL,EAKe,EAAC,KAAI,GAAL,EAAS,KAAI,GAAb,EALf,EAKkCqB,EALlC,GAKuCrB,CALvC,CAKyC,SALzC,EAKmD,EAAC,KAAI,GAAL,EAAS,KAAI,GAAb,EALnD;AAMAoD,uBAAapD,CAAb,CAAe,UAAf,EAA0B;AACxB,sBAAS,MADe;AAExB,sBAAS;AAFe,WAA1B;AAIAoD,uBAAapD,CAAb,CAAe,aAAf,EAA8B;AAC5B,wBAAW;AADiB,WAA9B;AAGD;AAxWM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyWP,UAAG,KAAKX,QAAL,CAAcE,eAAjB,EAAiC;AAC/BE,aAAKC,KAAL,GAAaA,MAAM2D,GAAN,CAAU;AACnBC,kBAAQ,IADW;AAEnBC,kBAAQ,IAFW;AAGnBC,mBAAS,IAHU;AAInBC,sBAAY;AAJO,SAAV,CAAb;AAMD,OAPD,MAOK;AACHhE,aAAKC,KAAL,GAAaA,KAAb;AACD;AACD,aAAOD,IAAP;AACD;;;4BACM;AACL,aAAOP,OAAOwE,OAAP,CAAe,EAACC,KAAI,CAAL,EAAQC,KAAI,mBAAZ,EAAf,CAAP,CADK,CACoD;AAC1D;;;;;;AAEHC,OAAOC,OAAP,GAAiB;AACf3E,eAAaA;AADE,CAAjB","file":"ArgMLExport.js","sourcesContent":["import * as _ from 'lodash';\n//import {EquivalenceClass} from 'argdown-parser';\nvar builder = require('xmlbuilder');\nvar Chance = require('chance');\nvar chance = new Chance();\n\nclass ArgMLExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      convertToString: true\n    });\n  }\n  constructor(config){\n    this.name = \"ArgMLExport\";\n    this.config = config;\n  }\n  run(data){\n    if(data.config){\n      if(data.config.argml){\n        this.config = data.config.argml;\n      }else if(data.config.ArgMLExport){\n        this.config = data.config.ArgMLExport;\n      }\n    }\n    \n    let argml = builder.create('graphml',{version: '1.0',\nencoding: 'UTF-8',\nstandalone: true})\n      .a('xmlns' , 'http://graphml.graphdrawing.org/xmlns')\n      .a('xmlns:arg' , 'xmlns:arg=\"http://www.argunet.org/xml/argml')\n      .a('xmlns:xsi' , 'http://www.w3.org/2001/XMLSchema-instance')\n      .a('xmlns:y'  , 'http://www.yworks.com/xml/graphml')\n      .a('xsi:schemaLocation' , 'http://www.argunet.org/xml/argml argunetxml.xsd http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd');\n\n      argml.e('key',{\n        'attr.name' :  'arg.debate',\n        'id' : 'd0'\n      });\n      argml.e('key',{\n        'for' : 'graphml',\n        'yfiles.type' :  'resources',\n        'id' : 'd1'\n      });\n      argml.e('key',{\n        'attr.name' :  'arg.node',\n        'for' : 'node',\n        'id' : 'd2'\n      });\n      argml.e('key',{\n        'for' : 'node',\n        'yfiles.type' :  'nodegraphics',\n        'id' : 'd3'\n      });\n      argml.e('key',{\n        'attr.name' : 'arg.edge',\n        'for' :  'edge',\n        'id' : 'd4'\n      });\n      argml.e('key',{\n        'for' : 'edge',\n        'yfiles.type' :  'edgegraphics',\n        'id' : 'd5'\n      });\n\n    let graph = argml.e('graph',{\n      'edgedefault' : 'directed',\n      'id' : 'G'\n    });\n\n    let statementArgMLIds = {};\n    let argumentArgMLIds = {};\n    let nodesByTitle = {};\n    //first we create argmlIds for every node and statement\n    //we could do this on the fly, but this way its cleaner\n    for(let node of data.map.nodes){\n      nodesByTitle[node.title] = node;\n      if(node.type == \"statement\"){\n        node.argmlId = statementArgMLIds[node.title];\n        if(!node.argmlId){\n            node.argmlId = this.getId();\n            statementArgMLIds[node.title] = node.argmlId;\n        }\n      }else if(node.type == \"argument\"){\n        node.argmlId = argumentArgMLIds[node.title];\n        if(!node.argmlId){\n            node.argmlId = this.getId();\n            argumentArgMLIds[node.title] = node.argmlId;\n        }\n\n        let argument = data.arguments[node.title];\n        for(let statement of argument.pcs){\n          let argmlId = statementArgMLIds[statement.title];\n          if(!argmlId){\n              argmlId = this.getId();\n              statementArgMLIds[statement.title] = argmlId;\n          }\n        }\n      }\n    }\n\n    for(let node of data.map.nodes){\n      let nodeEl = graph.e('node',{id: node.id});\n      let argDataEl = nodeEl.e('data',{'key':'d2'});\n\n      if(node.type == \"statement\"){\n        let statement = data.statements[node.title];\n        let thesisEl = argDataEl.e('arg:thesis',{'id':node.argmlId, 'colorIndex':'0'}).e('arg:title', null, statement.title).up();\n        let lastMember = _.last(statement.members);\n        thesisEl.e('arg:content', null, lastMember.text);\n        let shapeNode = nodeEl.e('data',{'key':'d3'}).e('y:shapeNode');\n        shapeNode.e('y:Geometry',{\n          'width':'135.0',\n          'x':'0',\n          'y':'0'\n        });\n        shapeNode.e('y:Fill',{\n          'color':'#FFFFFF',\n          'transparent':'false'\n        });\n        shapeNode.e('y:BorderStyle',{\n          'color':'#63AEF2',\n          'type':'line',\n          'width':'3.0'\n        });\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'node_width',\n          'configuration':'CroppingLabel',\n          'fontFamily':'Dialog',\n          'fontSize':'12',\n          'fontStyle':'plain',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'height':'0.0',\n          'modelName':'internal',\n          'modelPosition':'c',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'135.0',\n          x:'0.0'\n        });\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'content',\n          'fontFamily':'Arial',\n          'fontSize':'13',\n          'fontStyle':'bold',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'modelName':'internal',\n          'modelPosition':'t',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'118.0',\n          'x':'8.5'\n        },node.title);\n\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'content',\n          'fontFamily':'Arial',\n          'fontSize':'13',\n          'fontStyle':'plain',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'modelName':'internal',\n          'modelPosition':'b',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'128.0',\n          'x':'3.5'\n        },lastMember.text);\n        shapeNode.e('y:Shape',{'type':'roundrectangle'});\n\n      }else if(node.type == \"argument\"){\n        let argument = data.arguments[node.title];\n        let lastDescriptionStatement = _.last(argument.descriptions.members);\n        let description = (lastDescriptionStatement)?lastDescriptionStatement.text : \"\";\n        let argEl = argDataEl.e('arg:argument',{\n          'id' : node.argmlId,\n          'colorIndex' : '0',\n        }).e('arg:title',null,argument.title).up();\n        argEl.e('arg:description', null, description);\n        for(let i = 0; i < argument.pcs.length; i++){\n          let statement = argument.pcs[i];\n          let equivalenceClass = data.statements[statement.title];\n          let lastMember = _.last(equivalenceClass.members);\n          let propositionType = 'premise';\n          let argmlId = statementArgMLIds[statement.title];\n\n          if(statement.role == 'conclusion'){\n            if(i == argument.pcs.length - 1){\n              propositionType = 'conclusion';\n            }else{\n              propositionType = 'preliminaryConclusion';\n            }\n          }\n          argEl.e('arg:proposition',{\n            'id' : argmlId,\n            'type' : propositionType\n          }).e('arg:content', null, lastMember.text);\n          //let equivalenceClass = data.statements[statement.title];\n\n          //Hopefully the out-commented code will not be necessary in the future as ArgML will be cleaned up\n          //Until then, not all semantic relations will be exported. In most cases, this is not a problem.\n          // //In ArgML all semantic relations that are possibly not represented by edges, are saved in arg:proposition objects as arg:supportReference and arg:attackReference\n          // //These are:\n          // //1) Outgoing relations of premises and preliminiary conclusions\n          // //2) Incoming relations of conclusions\n          // for(let relation of equivalenceClass.relations){\n          //   //1) save outgoing relations of premises and preliminiary conclusions\n          //   if((propositionType == \"premise\" ||propositionType == \"preliminaryConclusion\") && relation.from == equivalenceClass){\n          //     let referenceAttributes = {};\n          //\n          //     if(relation.from instanceof EquivalenceClass){\n          //       let sourceArgmlId = statementArgMLIds[relation.from.title];\n          //       referenceAttributes.refersToProposition = sourceArgmlId;\n          //     }\n          //     let sourceNode = nodesByTitle[relation.from.title];\n          //     if(sourceNode){\n          //       referenceAttributes.refersToNode = sourceNode.id;\n          //       referenceAttributes.refersToArgunetNode = sourceNode.argmlId;\n          //     }\n          //\n          //     if(relation.type == \"attack\"){\n          //       propEl.e('arg:supportReference',referenceAttributes);\n          //     }else if(relation.type == \"support\"){\n          //       propEl.e('arg:attackReference',referenceAttributes);\n          //     }else if(relation.type == \"contradiction\"){\n          //       propEl.e('arg:contradictionReference',referenceAttributes);\n          //     }\n          //\n          //   //2) save incoming relations of conclusions\n          //   }else if(statement.role == \"conclusion\" && relation.to == equivalenceClass){\n          //     let referenceAttributes = {};\n          //\n          //     if(relation.to instanceof EquivalenceClass){\n          //       let targetArgmlId = statementArgMLIds[relation.to.title];\n          //       referenceAttributes.refersToProposition = targetArgmlId;\n          //     }\n          //     let targetNode = nodesByTitle[relation.to.title];\n          //     if(targetNode){\n          //       referenceAttributes.refersToNode = targetNode.id;\n          //       referenceAttributes.refersToArgunetNode = targetNode.argmlId;\n          //     }\n          //\n          //     if(relation.type == \"attack\"){\n          //       propEl.e('arg:supportReference',referenceAttributes);\n          //     }else if(relation.type == \"support\"){\n          //       propEl.e('arg:attackReference',referenceAttributes);\n          //     }else if(relation.type == \"contradiction\"){\n          //       propEl.e('arg:contradictionReference',referenceAttributes);\n          //     }\n          //\n          //   }\n          // }\n        }\n        let shapeNode = nodeEl.e('data',{'key':'d3'}).e('y:shapeNode');\n        shapeNode.e('y:Geometry',{\n          'width': '135',\n          'x':'0',\n          'y':'0'\n        });\n        shapeNode.e('y:Fill',{\n          'color':'#63AEF2',\n          'color2':'#82BEF5',\n          'transparent':'false'\n        });\n        shapeNode.e('y:BorderStyle',{\n          'color':'#000000',\n          'type':'line',\n          'width':'1.0'\n        });\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'node_width',\n          'configuration':'CroppingLabel',\n          'fontFamily':'Dialog',\n          'fontSize':'12',\n          'fontStyle':'plain',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'height':'0.0',\n          'modelName':'internal',\n          'modelPosition':'c',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'135.0',\n          'x':'0.0'\n        });\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'content',\n          'fontFamily':'Arial',\n          'fontSize':'13',\n          'fontStyle':'bold',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'modelName':'internal',\n          'modelPosition':'t',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'88.0',\n          x:'23.5'\n        }, node.title);\n\n        shapeNode.e('y:NodeLabel',{\n          'alignment':'center',\n          'autoSizePolicy':'content',\n          'fontFamily':'Arial',\n          'fontSize':'13',\n          'fontStyle':'plain',\n          'hasBackgroundColor':'false',\n          'hasLineColor':'false',\n          'modelName':'internal',\n          'modelPosition':'b',\n          'textColor':'#000000',\n          'visible':'true',\n          'width':'131.0',\n          'x':'2.0'\n        }, description);\n        shapeNode.e('y:Shape',{'type':'roundrectangle'});\n\n      }\n    }\n\n    for(let edge of data.map.edges){\n      let edgeEl = graph.e('edge',{id:edge.id, source:edge.from.id, target:edge.to.id});\n      let edgeType;\n      let edgeColor = '#00FF00';\n      if(edge.type == 'attack'){\n        edgeColor = '#FF0000';\n        if(edge.status == \"sketched\"){\n          edgeType = \"sketchedAttack\";\n        }else{\n          edgeType = \"attack\";\n        }\n      }else if(edge.type == \"support\"){\n        if(edge.status == \"sketched\"){\n          edgeType = \"sketchedSupport\";\n        }else{\n          edgeType = \"support\";\n        }\n      }\n      let argEdgeAttributes = {\n        'sourceNodeId': edge.from.argmlId,\n        'targetNodeId': edge.to.argmlId,\n        'type': edgeType\n      };\n      if(edge.fromStatement){\n        argEdgeAttributes.sourcePropositionId = statementArgMLIds[edge.fromStatement.title];\n      }\n      if(edge.toStatement){\n        argEdgeAttributes.targetPropositionId = statementArgMLIds[edge.toStatement.title];\n      }\n      edgeEl.e('data',{'key':'d4'}).e('arg:edge', argEdgeAttributes);\n\n      let polyLineEdge = edgeEl.e('data',{'key':'d5'}).e('y:PolyLineEdge');\n      polyLineEdge.e('y:LineStyle',{\n        'color':edgeColor,\n        'type':'line',\n        'width':'2.0'\n      });\n      polyLineEdge.e('y:Path',{\n        'sx':'0',\n        'sy':'0',\n        'tx':'0',\n        'ty':'0'\n      }).e('y:Point',{'x':'0','y':'0'}).up().e('y:Point',{'x':'0','y':'0'});\n      polyLineEdge.e('y:Arrows',{\n        'source':'none',\n        'target':'standard'\n      });\n      polyLineEdge.e('y:BendStyle', {\n        'smoothed':'false'\n      });\n    }\n    if(this.settings.convertToString){\n      data.argml = argml.end({\n          pretty: true,\n          indent: '  ',\n          newline: '\\n',\n          allowEmpty: false\n      });\n    }else{\n      data.argml = argml;\n    }\n    return data;\n  }\n  getId(){\n    return chance.natural({min:0, max:9223372036854775807}); //positive long value\n  }\n}\nmodule.exports = {\n  ArgMLExport: ArgMLExport\n}\n"]}