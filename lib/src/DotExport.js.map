{"version":3,"sources":["../../src/DotExport.js"],"names":["_","DotExport","config","settings","defaults","useHtmlLabels","onlyTitlesInHtmlLabels","graphname","lineLength","groupColors","name","data","groupCount","dot","map","nodes","node","exportNodesRecursive","edges","edge","color","type","attributes","from","id","to","element","statements","title","arguments","dotGroupId","groupLabel","foldAndEscape","escapeQuotesForDot","groupColor","length","level","child","label","lastMember","last","members","descriptions","content","text","str","strArray","fold","i","escapeForHtml","join","s","replace","c","charCodeAt","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      useHtmlLabels : true,\n      onlyTitlesInHtmlLabels: false,\n      graphname: 'Argument Map',\n      lineLength: 25,\n      groupColors: [\"#DADADA\",\"#BABABA\",\"#AAAAAA\"]\n    });\n  }\n  constructor(config){\n    this.name = \"DotExport\";\n    this.config = config;\n  }\n  run(data){\n    this.groupCount = 0;\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n\n    for(let node of data.map.nodes){\n      dot += this.exportNodesRecursive(node, data);\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let edge of data.map.edges){\n      let color = \"green\";\n      if(edge.type == \"attack\"){\n        color = \"red\";\n      }\n      let attributes = \"color=\\\"\"+color+\"\\\", type=\\\"\"+edge.type+\"\\\"\";\n      dot += \"  \"+edge.from.id + \" -> \" + edge.to.id + \" [\"+attributes+\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  exportNodesRecursive(node, data){\n    let dot = \"\";\n    let element;\n    if(node.type == \"statement\"){\n      element = data.statements[node.title];\n    }else if(node.type == \"argument\"){\n      element = data.arguments[node.title];\n    }else if(node.type == \"group\"){\n      this.groupCount++;\n      let dotGroupId = \"cluster_\"+this.groupCount;\n      let groupLabel = node.title;\n      if(this.settings.useHtmlLabels){\n        groupLabel = this.foldAndEscape(groupLabel);        \n        groupLabel = \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"10\\\">\"+groupLabel+\"</FONT>>\";\n      }else{\n        groupLabel = \"\\\"\"+this.escapeQuotesForDot(groupLabel)+\"\\\"\";\n      }\n      let groupColor = \"#CCCCCC\";\n      if(this.settings.groupColors && this.settings.groupColors.length > 0){\n        if(this.settings.groupColors.length >= node.level){\n          groupColor = this.settings.groupColors[node.level];                  \n        }else{\n          groupColor = this.settings.groupColors[this.settings.groupColors.length - 1];\n        }\n      }\n      \n      dot += \"\\nsubgraph \"+dotGroupId+\" {\\n\";\n      dot += \"  label = \"+groupLabel+\";\\n\";\n      dot += \"  color = \\\"\"+groupColor+\"\\\";\\n\";\n      dot += \"  style = filled;\\n\\n\";\n      \n      for(let child of node.nodes){\n        dot += this.exportNodesRecursive(child, data);\n      }\n      dot += \"\\n}\\n\\n\";\n      return dot;\n    }\n    \n    let label = \"\";\n    if(this.settings.useHtmlLabels){\n      label = this.foldAndEscape(node.title);\n      label = \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"8\\\"><TABLE BORDER=\\\"0\\\" CELLSPACING=\\\"0\\\"><TR><TD ALIGN=\\\"center\\\"><B>\"+label+\"</B></TD></TR>\";\n      if(!this.settings.onlyTitlesInHtmlLabels){\n        let lastMember;\n        if(node.type == \"statement\"){\n          lastMember = _.last(element.members);\n        }else{\n          lastMember = _.last(element.descriptions);\n        }\n        if(lastMember){\n          let content = lastMember.text;\n          if(content){\n            content = this.foldAndEscape(content);\n            label += \"<TR><TD ALIGN=\\\"center\\\">\"+content+\"</TD></TR>\";\n          }\n        }\n      }\n      label += \"</TABLE></FONT>>\";\n    }else{\n      label = \"\\\"\"+this.escapeQuotesForDot(node.title)+\"\\\"\";\n    }\n    if(node.type == \"statement\"){\n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded,bold\\\", color=\\\"#63AEF2\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n    }else{\n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"#63AEF2\\\",  type=\\\"\"+node.type+\"\\\"];\\n\";\n    }\n    \n    \n    return dot;\n  }\n  foldAndEscape(str){\n    let strArray = this.fold(str, this.settings.lineLength, true);\n    for(let i = 0; i < strArray.length; i++){\n      strArray[i] = this.escapeForHtml(strArray[i]);\n    }\n    return strArray.join('<br/>');\n  }\n  escapeForHtml(s) {\n      return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n          return \"&#\" + c.charCodeAt(0) + \";\";\n      } );\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\"');\n  }\n\n\n  //http://jsfiddle.net/jahroy/Rwr7q/18/\n  //http://stackoverflow.com/questions/17895039/how-to-insert-line-break-after-every-80-characters\n  // Folds a string at a specified length, optionally attempting\n  // to insert newlines after whitespace characters.\n  //\n  // s          -  input string\n  // n          -  number of chars at which to separate lines\n  // useSpaces  -  if true, attempt to insert newlines at whitespace\n  // a          -  array used to build result\n  //\n  // Returns an array of strings that are no longer than n\n  // characters long.  If a is specified as an array, the lines\n  // found in s will be pushed onto the end of a.\n  //\n  // If s is huge and n is very small, this method will have\n  // problems... StackOverflow.\n  //\n\n  fold(s, n, useSpaces, a) {\n    if(!s)\n      return [];\n\n      a = a || [];\n      if (s.length <= n) {\n          a.push(s);\n          return a;\n      }\n      var line = s.substring(0, n);\n      if (! useSpaces) { // insert newlines anywhere\n          a.push(line);\n          return this.fold(s.substring(n), n, useSpaces, a);\n      }\n      else { // attempt to insert newlines after whitespace\n          var lastSpaceRgx = /\\s(?!.*\\s)/;\n          var idx = line.search(lastSpaceRgx);\n          var nextIdx = n;\n          if (idx > 0) {\n              line = line.substring(0, idx);\n              nextIdx = idx;\n          }\n          a.push(line);\n          return this.fold(s.substring(nextIdx), n, useSpaces, a);\n      }\n  }\n\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}