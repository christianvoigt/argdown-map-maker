{"version":3,"sources":["../../src/DotExport.js"],"names":["_","DotExport","config","settings","defaults","useHtmlLabels","graphname","lineLength","groupColors","graphVizSettings","rankDir","concentrate","ratio","size","argumentLabelMode","statementLabelMode","name","data","groupCount","dot","keys","Object","key","value","map","nodes","node","exportNodesRecursive","edges","edge","color","type","attributes","from","id","to","dotGroupId","groupLabel","title","foldAndEscape","escapeQuotesForDot","groupColor","length","level","labelloc","child","text","label","getLabel","isEmpty","startsWith","titleLabel","textLabel","str","strArray","fold","i","escapeForHtml","join","s","replace","c","charCodeAt","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      useHtmlLabels : true,\n      graphname: 'Argument Map',\n      lineLength: 25,\n      groupColors: [\"#DADADA\",\"#BABABA\",\"#AAAAAA\"],\n      graphVizSettings: {\n        rankDir: 'BT', //BT | TB | LR | RL\n        concentrate: 'true',\n        ratio: 'fill',\n        size: '10,10'\n      },\n      argumentLabelMode: 'hide-untitled', //hide-untitled | title | description\n      statementLabelMode: 'hide-untitled', //hide-untitled | title | text\n    });\n  }\n  constructor(config){\n    this.name = \"DotExport\";\n    this.config = config;\n  }\n  run(data){\n    this.groupCount = 0;\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n    if(this.settings.graphVizSettings){\n      const keys = Object.keys(this.settings.graphVizSettings);\n      for(let key of keys){\n        const value = this.settings.graphVizSettings[key];\n        dot += key+\" = \\\"\"+value+\"\\\";\\n\";\n      }\n    }\n\n    for(let node of data.map.nodes){\n      dot += this.exportNodesRecursive(node, data);\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let edge of data.map.edges){\n      let color = \"green\";\n      if(edge.type == \"attack\"){\n        color = \"red\";\n      }\n      let attributes = \"color=\\\"\"+color+\"\\\", type=\\\"\"+edge.type+\"\\\"\";\n      dot += \"  \"+edge.from.id + \" -> \" + edge.to.id + \" [\"+attributes+\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  exportNodesRecursive(node, data){\n    let dot = \"\";\n    if(node.type == \"group\"){\n      this.groupCount++;\n      let dotGroupId = \"cluster_\"+this.groupCount;\n      let groupLabel = node.title;\n      if(this.settings.useHtmlLabels){\n        groupLabel = this.foldAndEscape(groupLabel);        \n        groupLabel = \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"10\\\">\"+groupLabel+\"</FONT>>\";\n      }else{\n        groupLabel = \"\\\"\"+this.escapeQuotesForDot(groupLabel)+\"\\\"\";\n      }\n      let groupColor = \"#CCCCCC\";\n      if(this.settings.groupColors && this.settings.groupColors.length > 0){\n        if(this.settings.groupColors.length >= node.level){\n          groupColor = this.settings.groupColors[node.level];                  \n        }else{\n          groupColor = this.settings.groupColors[this.settings.groupColors.length - 1];\n        }\n      }\n      \n      dot += \"\\nsubgraph \"+dotGroupId+\" {\\n\";\n      dot += \"  label = \"+groupLabel+\";\\n\";\n      dot += \"  color = \\\"\"+groupColor+\"\\\";\\n\";\n      dot += \"  style = filled;\\n\";\n      let labelloc = \"t\"\n      if(this.settings.rankDir == \"BT\"){\n        labelloc = \"b\";\n      }\n      dot += \" labelloc = \\\"\"+labelloc+\"\\\";\\n\\n\";\n      \n      for(let child of node.nodes){\n        dot += this.exportNodesRecursive(child, data);\n      }\n      dot += \"\\n}\\n\\n\";\n      return dot;\n    }\n    \n    let title = node.title;\n    let text = node.text;\n    let label = \"\";\n    if(node.type == \"argument\"){\n      if(this.settings.argumentLabelMode == 'hide-untitled'){\n        label = this.getLabel(title, text);        \n      }else if(this.settings.argumentLabelMode == 'title'){\n        label = this.getLabel(title, null);\n      }else{\n        label = this.getLabel(null, text);\n      }\n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"#63AEF2\\\",  type=\\\"\"+node.type+\"\\\"];\\n\";\n    }else if(node.type == \"statement\"){\n      if(this.settings.statementLabelMode == 'hide-untitled'){\n        label = this.getLabel(title, text);        \n      }else if(this.settings.statementLabelMode == 'title'){\n        label = this.getLabel(title, null);\n      }else{\n        label = this.getLabel(null, text);\n      }      \n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded,bold\\\", color=\\\"#63AEF2\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n    }        \n    return dot;\n  }\n  getLabel(title, text){\n    let label = \"\";\n    if(this.settings.useHtmlLabels){\n      label += \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"8\\\"><TABLE BORDER=\\\"0\\\" CELLSPACING=\\\"0\\\">\";\n      if(!_.isEmpty(title) && (_.isEmpty(text) || !title.startsWith(\"Untitled\"))){\n          let titleLabel = this.foldAndEscape(title);\n          titleLabel = \"<TR><TD ALIGN=\\\"center\\\"><B>\"+titleLabel+\"</B></TD></TR>\";\n          label += titleLabel;\n      }\n      if(!_.isEmpty(text)){\n        let textLabel = this.foldAndEscape(text);\n        textLabel = \"<TR><TD ALIGN=\\\"center\\\">\"+textLabel+\"</TD></TR>\";\n        label += textLabel;\n      }\n      label += \"</TABLE></FONT>>\";\n    }else{\n      label = \"\\\"\"+this.escapeQuotesForDot(title)+\"\\\"\";\n    }    \n    return label;\n  }\n  foldAndEscape(str){\n    let strArray = this.fold(str, this.settings.lineLength, true);\n    for(let i = 0; i < strArray.length; i++){\n      strArray[i] = this.escapeForHtml(strArray[i]);\n    }\n    return strArray.join('<br/>');\n  }\n  escapeForHtml(s) {\n      return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n          return \"&#\" + c.charCodeAt(0) + \";\";\n      } );\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\"');\n  }\n\n\n  //http://jsfiddle.net/jahroy/Rwr7q/18/\n  //http://stackoverflow.com/questions/17895039/how-to-insert-line-break-after-every-80-characters\n  // Folds a string at a specified length, optionally attempting\n  // to insert newlines after whitespace characters.\n  //\n  // s          -  input string\n  // n          -  number of chars at which to separate lines\n  // useSpaces  -  if true, attempt to insert newlines at whitespace\n  // a          -  array used to build result\n  //\n  // Returns an array of strings that are no longer than n\n  // characters long.  If a is specified as an array, the lines\n  // found in s will be pushed onto the end of a.\n  //\n  // If s is huge and n is very small, this method will have\n  // problems... StackOverflow.\n  //\n\n  fold(s, n, useSpaces, a) {\n    if(!s)\n      return [];\n\n      a = a || [];\n      if (s.length <= n) {\n          a.push(s);\n          return a;\n      }\n      var line = s.substring(0, n);\n      if (! useSpaces) { // insert newlines anywhere\n          a.push(line);\n          return this.fold(s.substring(n), n, useSpaces, a);\n      }\n      else { // attempt to insert newlines after whitespace\n          var lastSpaceRgx = /\\s(?!.*\\s)/;\n          var idx = line.search(lastSpaceRgx);\n          var nextIdx = n;\n          if (idx > 0) {\n              line = line.substring(0, idx);\n              nextIdx = idx;\n          }\n          a.push(line);\n          return this.fold(s.substring(nextIdx), n, useSpaces, a);\n      }\n  }\n\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}