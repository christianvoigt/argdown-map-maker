{"version":3,"sources":["../../src/DotExport.js"],"names":["_","DotExport","config","previousSettings","settings","useHtmlLabels","graphname","lineLength","groupColors","graphVizSettings","rankDir","concentrate","ratio","size","argumentLabelMode","statementLabelMode","colorNodesByFirstTag","defaultsDeep","name","data","dot","groupCount","keys","Object","key","value","map","nodes","node","exportNodesRecursive","edges","edge","color","type","attributes","from","id","to","dotGroupId","groupLabel","title","foldAndEscape","escapeQuotesForDot","groupColor","length","level","labelloc","child","text","label","tags","tag","tagData","getLabel","isEmpty","startsWith","titleLabel","textLabel","str","strArray","fold","i","escapeForHtml","join","s","replace","c","charCodeAt","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","module","exports"],"mappings":";;;;AAAA;;IAAYA,C;;;;;;IAENC,S;;;sBACOC,M,EAAO;AAChB,UAAIC,mBAAmB,KAAKC,QAA5B;AACA,UAAG,CAACD,gBAAJ,EAAqB;AACnBA,2BAAmB;AACjBE,yBAAgB,IADC;AAEjBC,qBAAW,cAFM;AAGjBC,sBAAY,EAHK;AAIjBC,uBAAa,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,CAJI;AAKjBC,4BAAkB;AAChBC,qBAAS,IADO,EACD;AACfC,yBAAa,MAFG;AAGhBC,mBAAO,MAHS;AAIhBC,kBAAM;AAJU,WALD;AAWjBC,6BAAmB,eAXF,EAWmB;AACpCC,8BAAoB,eAZH,EAYoB;AACrCC,gCAAsB;AAbL,SAAnB;AAeD;AACD,WAAKZ,QAAL,GAAgBJ,EAAEiB,YAAF,CAAe,EAAf,EAAmBf,MAAnB,EAA2BC,gBAA3B,CAAhB;AACD;;;AACD,qBAAYD,MAAZ,EAAmB;AAAA;;AACjB,SAAKgB,IAAL,GAAY,WAAZ;AACA,SAAKhB,MAAL,GAAcA,MAAd;AACD;;;;wBACGiB,I,EAAK;AACP,UAAGA,KAAKjB,MAAR,EAAe;AACb,YAAGiB,KAAKjB,MAAL,CAAYkB,GAAf,EAAmB;AACjB,eAAKlB,MAAL,GAAciB,KAAKjB,MAAL,CAAYkB,GAA1B;AACD,SAFD,MAEM,IAAGD,KAAKjB,MAAL,CAAYD,SAAf,EAAyB;AAC7B,eAAKC,MAAL,GAAciB,KAAKjB,MAAL,CAAYD,SAA1B;AACD;AACF;;AAED,WAAKoB,UAAL,GAAkB,CAAlB;AACA,UAAID,MAAM,eAAa,KAAKhB,QAAL,CAAcE,SAA3B,GAAqC,UAA/C;AACA,UAAG,KAAKF,QAAL,CAAcK,gBAAjB,EAAkC;AAChC,YAAMa,OAAOC,OAAOD,IAAP,CAAY,KAAKlB,QAAL,CAAcK,gBAA1B,CAAb;AADgC;AAAA;AAAA;;AAAA;AAEhC,+BAAea,IAAf,8HAAoB;AAAA,gBAAZE,GAAY;;AAClB,gBAAMC,QAAQ,KAAKrB,QAAL,CAAcK,gBAAd,CAA+Be,GAA/B,CAAd;AACAJ,mBAAOI,MAAI,OAAJ,GAAYC,KAAZ,GAAkB,OAAzB;AACD;AAL+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMjC;;AAjBM;AAAA;AAAA;;AAAA;AAmBP,8BAAgBN,KAAKO,GAAL,CAASC,KAAzB,mIAA+B;AAAA,cAAvBC,IAAuB;;AAC7BR,iBAAO,KAAKS,oBAAL,CAA0BD,IAA1B,EAAgCT,IAAhC,CAAP;AACD;AArBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBPC,aAAM,MAAN;;AAvBO;AAAA;AAAA;;AAAA;AAyBP,8BAAgBD,KAAKO,GAAL,CAASI,KAAzB,mIAA+B;AAAA,cAAvBC,IAAuB;;AAC7B,cAAIC,QAAQ,OAAZ;AACA,cAAGD,KAAKE,IAAL,IAAa,QAAhB,EAAyB;AACvBD,oBAAQ,KAAR;AACD;AACD,cAAIE,aAAa,aAAWF,KAAX,GAAiB,aAAjB,GAA+BD,KAAKE,IAApC,GAAyC,IAA1D;AACAb,iBAAO,OAAKW,KAAKI,IAAL,CAAUC,EAAf,GAAoB,MAApB,GAA6BL,KAAKM,EAAL,CAAQD,EAArC,GAA0C,IAA1C,GAA+CF,UAA/C,GAA0D,MAAjE;AACD;AAhCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkCPd,aAAO,KAAP;;AAEAD,WAAKC,GAAL,GAAWA,GAAX;AACA,aAAOD,IAAP;AACD;;;yCACoBS,I,EAAMT,I,EAAK;AAC9B,UAAIC,MAAM,EAAV;AACA,UAAGQ,KAAKK,IAAL,IAAa,OAAhB,EAAwB;AACtB,aAAKZ,UAAL;AACA,YAAIiB,aAAa,aAAW,KAAKjB,UAAjC;AACA,YAAIkB,aAAaX,KAAKY,KAAtB;AACA,YAAG,KAAKpC,QAAL,CAAcC,aAAjB,EAA+B;AAC7BkC,uBAAa,KAAKE,aAAL,CAAmBF,UAAnB,CAAb;AACAA,uBAAa,6CAA2CA,UAA3C,GAAsD,UAAnE;AACD,SAHD,MAGK;AACHA,uBAAa,OAAK,KAAKG,kBAAL,CAAwBH,UAAxB,CAAL,GAAyC,IAAtD;AACD;AACD,YAAII,aAAa,SAAjB;AACA,YAAG,KAAKvC,QAAL,CAAcI,WAAd,IAA6B,KAAKJ,QAAL,CAAcI,WAAd,CAA0BoC,MAA1B,GAAmC,CAAnE,EAAqE;AACnE,cAAG,KAAKxC,QAAL,CAAcI,WAAd,CAA0BoC,MAA1B,IAAoChB,KAAKiB,KAA5C,EAAkD;AAChDF,yBAAa,KAAKvC,QAAL,CAAcI,WAAd,CAA0BoB,KAAKiB,KAA/B,CAAb;AACD,WAFD,MAEK;AACHF,yBAAa,KAAKvC,QAAL,CAAcI,WAAd,CAA0B,KAAKJ,QAAL,CAAcI,WAAd,CAA0BoC,MAA1B,GAAmC,CAA7D,CAAb;AACD;AACF;;AAEDxB,eAAO,gBAAckB,UAAd,GAAyB,MAAhC;AACAlB,eAAO,eAAamB,UAAb,GAAwB,KAA/B;AACAnB,eAAO,iBAAeuB,UAAf,GAA0B,OAAjC;AACAvB,eAAO,qBAAP;AACA,YAAI0B,WAAW,GAAf;AACA,YAAG,KAAK1C,QAAL,CAAcM,OAAd,IAAyB,IAA5B,EAAiC;AAC/BoC,qBAAW,GAAX;AACD;AACD1B,eAAO,mBAAiB0B,QAAjB,GAA0B,SAAjC;;AA3BsB;AAAA;AAAA;;AAAA;AA6BtB,gCAAiBlB,KAAKD,KAAtB,mIAA4B;AAAA,gBAApBoB,KAAoB;;AAC1B3B,mBAAO,KAAKS,oBAAL,CAA0BkB,KAA1B,EAAiC5B,IAAjC,CAAP;AACD;AA/BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgCtBC,eAAO,SAAP;AACA,eAAOA,GAAP;AACD;;AAED,UAAIoB,QAAQZ,KAAKY,KAAjB;AACA,UAAIQ,OAAOpB,KAAKoB,IAAhB;AACA,UAAIC,QAAQ,EAAZ;AACA,UAAIjB,QAAQ,SAAZ;AACA,UAAG,KAAK5B,QAAL,CAAcY,oBAAd,IAAsCY,KAAKsB,IAA3C,IAAmD/B,KAAKjB,MAAxD,IAAkEiB,KAAKjB,MAAL,CAAYgD,IAAjF,EAAsF;AACpF,YAAMC,MAAMvB,KAAKsB,IAAL,CAAU,CAAV,CAAZ;AACA,YAAIE,UAAUjC,KAAKjB,MAAL,CAAYgD,IAAZ,CAAiBC,GAAjB,CAAd;AACA,YAAGC,WAAWA,QAAQpB,KAAtB,EAA4B;AAC1BA,kBAAQoB,QAAQpB,KAAhB;AACD;AACF;AACD,UAAGJ,KAAKK,IAAL,IAAa,UAAhB,EAA2B;AACzB,YAAG,KAAK7B,QAAL,CAAcU,iBAAd,IAAmC,eAAtC,EAAsD;AACpDmC,kBAAQ,KAAKI,QAAL,CAAcb,KAAd,EAAqBQ,IAArB,CAAR;AACD,SAFD,MAEM,IAAG,KAAK5C,QAAL,CAAcU,iBAAd,IAAmC,OAAtC,EAA8C;AAClDmC,kBAAQ,KAAKI,QAAL,CAAcb,KAAd,EAAqB,IAArB,CAAR;AACD,SAFK,MAED;AACHS,kBAAQ,KAAKI,QAAL,CAAc,IAAd,EAAoBL,IAApB,CAAR;AACD;AACD5B,eAAO,OAAKQ,KAAKQ,EAAV,GAAe,UAAf,GAA0Ba,KAA1B,GAAgC,yDAAhC,GAA0FjB,KAA1F,GAAgG,cAAhG,GAA+GJ,KAAKK,IAApH,GAAyH,QAAhI;AACD,OATD,MASM,IAAGL,KAAKK,IAAL,IAAa,WAAhB,EAA4B;AAChC,YAAG,KAAK7B,QAAL,CAAcW,kBAAd,IAAoC,eAAvC,EAAuD;AACrDkC,kBAAQ,KAAKI,QAAL,CAAcb,KAAd,EAAqBQ,IAArB,CAAR;AACD,SAFD,MAEM,IAAG,KAAK5C,QAAL,CAAcW,kBAAd,IAAoC,OAAvC,EAA+C;AACnDkC,kBAAQ,KAAKI,QAAL,CAAcb,KAAd,EAAqB,IAArB,CAAR;AACD,SAFK,MAED;AACHS,kBAAQ,KAAKI,QAAL,CAAc,IAAd,EAAoBL,IAApB,CAAR;AACD;AACD5B,eAAO,OAAKQ,KAAKQ,EAAV,GAAe,UAAf,GAA0Ba,KAA1B,GAAgC,0DAAhC,GAA2FjB,KAA3F,GAAiG,4DAAjG,GAA8JJ,KAAKK,IAAnK,GAAwK,QAA/K;AACD;AACD,aAAOb,GAAP;AACD;;;6BACQoB,K,EAAOQ,I,EAAK;AACnB,UAAIC,QAAQ,EAAZ;AACA,UAAG,KAAK7C,QAAL,CAAcC,aAAjB,EAA+B;AAC7B4C,iBAAS,+EAAT;AACA,YAAG,CAACjD,EAAEsD,OAAF,CAAUd,KAAV,CAAD,KAAsBxC,EAAEsD,OAAF,CAAUN,IAAV,KAAmB,CAACR,MAAMe,UAAN,CAAiB,UAAjB,CAA1C,CAAH,EAA2E;AACvE,cAAIC,aAAa,KAAKf,aAAL,CAAmBD,KAAnB,CAAjB;AACAgB,uBAAa,iCAA+BA,UAA/B,GAA0C,gBAAvD;AACAP,mBAASO,UAAT;AACH;AACD,YAAG,CAACxD,EAAEsD,OAAF,CAAUN,IAAV,CAAJ,EAAoB;AAClB,cAAIS,YAAY,KAAKhB,aAAL,CAAmBO,IAAnB,CAAhB;AACAS,sBAAY,8BAA4BA,SAA5B,GAAsC,YAAlD;AACAR,mBAASQ,SAAT;AACD;AACDR,iBAAS,kBAAT;AACD,OAbD,MAaK;AACHA,gBAAQ,OAAK,KAAKP,kBAAL,CAAwBF,KAAxB,CAAL,GAAoC,IAA5C;AACD;AACD,aAAOS,KAAP;AACD;;;kCACaS,G,EAAI;AAChB,UAAIC,WAAW,KAAKC,IAAL,CAAUF,GAAV,EAAe,KAAKtD,QAAL,CAAcG,UAA7B,EAAyC,IAAzC,CAAf;AACA,WAAI,IAAIsD,IAAI,CAAZ,EAAeA,IAAIF,SAASf,MAA5B,EAAoCiB,GAApC,EAAwC;AACtCF,iBAASE,CAAT,IAAc,KAAKC,aAAL,CAAmBH,SAASE,CAAT,CAAnB,CAAd;AACD;AACD,aAAOF,SAASI,IAAT,CAAc,OAAd,CAAP;AACD;;;kCACaC,C,EAAG;AACb,aAAOA,EAAEC,OAAF,CAAU,gBAAV,EAA4B,UAASC,CAAT,EAAY;AAC3C,eAAO,OAAOA,EAAEC,UAAF,CAAa,CAAb,CAAP,GAAyB,GAAhC;AACH,OAFM,CAAP;AAGH;;;uCACkBT,G,EAAI;AACrB,aAAOA,IAAIO,OAAJ,CAAY,KAAZ,EAAkB,KAAlB,CAAP;AACD;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yBAEKD,C,EAAGI,C,EAAGC,S,EAAWC,C,EAAG;AACvB,UAAG,CAACN,CAAJ,EACE,OAAO,EAAP;;AAEAM,UAAIA,KAAK,EAAT;AACA,UAAIN,EAAEpB,MAAF,IAAYwB,CAAhB,EAAmB;AACfE,UAAEC,IAAF,CAAOP,CAAP;AACA,eAAOM,CAAP;AACH;AACD,UAAIE,OAAOR,EAAES,SAAF,CAAY,CAAZ,EAAeL,CAAf,CAAX;AACA,UAAI,CAAEC,SAAN,EAAiB;AAAE;AACfC,UAAEC,IAAF,CAAOC,IAAP;AACA,eAAO,KAAKZ,IAAL,CAAUI,EAAES,SAAF,CAAYL,CAAZ,CAAV,EAA0BA,CAA1B,EAA6BC,SAA7B,EAAwCC,CAAxC,CAAP;AACH,OAHD,MAIK;AAAE;AACH,YAAII,eAAe,YAAnB;AACA,YAAIC,MAAMH,KAAKI,MAAL,CAAYF,YAAZ,CAAV;AACA,YAAIG,UAAUT,CAAd;AACA,YAAIO,MAAM,CAAV,EAAa;AACTH,iBAAOA,KAAKC,SAAL,CAAe,CAAf,EAAkBE,GAAlB,CAAP;AACAE,oBAAUF,GAAV;AACH;AACDL,UAAEC,IAAF,CAAOC,IAAP;AACA,eAAO,KAAKZ,IAAL,CAAUI,EAAES,SAAF,CAAYI,OAAZ,CAAV,EAAgCT,CAAhC,EAAmCC,SAAnC,EAA8CC,CAA9C,CAAP;AACH;AACJ;;;;;;AAGHQ,OAAOC,OAAP,GAAiB;AACf9E,aAAWA;AADI,CAAjB","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    let previousSettings = this.settings;\n    if(!previousSettings){\n      previousSettings = {\n        useHtmlLabels : true,\n        graphname: 'Argument Map',\n        lineLength: 25,\n        groupColors: [\"#DADADA\",\"#BABABA\",\"#AAAAAA\"],\n        graphVizSettings: {\n          rankDir: 'BT', //BT | TB | LR | RL\n          concentrate: 'true',\n          ratio: 'fill',\n          size: '10,10'\n        },\n        argumentLabelMode: 'hide-untitled', //hide-untitled | title | description\n        statementLabelMode: 'hide-untitled', //hide-untitled | title | text\n        colorNodesByFirstTag: true\n      }\n    }\n    this.settings = _.defaultsDeep({}, config, previousSettings);\n  }\n  constructor(config){\n    this.name = \"DotExport\";\n    this.config = config;\n  }\n  run(data){\n    if(data.config){\n      if(data.config.dot){\n        this.config = data.config.dot;\n      }else if(data.config.DotExport){\n        this.config = data.config.DotExport;\n      }\n    }\n    \n    this.groupCount = 0;\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n    if(this.settings.graphVizSettings){\n      const keys = Object.keys(this.settings.graphVizSettings);\n      for(let key of keys){\n        const value = this.settings.graphVizSettings[key];\n        dot += key+\" = \\\"\"+value+\"\\\";\\n\";\n      }\n    }\n\n    for(let node of data.map.nodes){\n      dot += this.exportNodesRecursive(node, data);\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let edge of data.map.edges){\n      let color = \"green\";\n      if(edge.type == \"attack\"){\n        color = \"red\";\n      }\n      let attributes = \"color=\\\"\"+color+\"\\\", type=\\\"\"+edge.type+\"\\\"\";\n      dot += \"  \"+edge.from.id + \" -> \" + edge.to.id + \" [\"+attributes+\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  exportNodesRecursive(node, data){\n    let dot = \"\";\n    if(node.type == \"group\"){\n      this.groupCount++;\n      let dotGroupId = \"cluster_\"+this.groupCount;\n      let groupLabel = node.title;\n      if(this.settings.useHtmlLabels){\n        groupLabel = this.foldAndEscape(groupLabel);        \n        groupLabel = \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"10\\\">\"+groupLabel+\"</FONT>>\";\n      }else{\n        groupLabel = \"\\\"\"+this.escapeQuotesForDot(groupLabel)+\"\\\"\";\n      }\n      let groupColor = \"#CCCCCC\";\n      if(this.settings.groupColors && this.settings.groupColors.length > 0){\n        if(this.settings.groupColors.length >= node.level){\n          groupColor = this.settings.groupColors[node.level];                  \n        }else{\n          groupColor = this.settings.groupColors[this.settings.groupColors.length - 1];\n        }\n      }\n      \n      dot += \"\\nsubgraph \"+dotGroupId+\" {\\n\";\n      dot += \"  label = \"+groupLabel+\";\\n\";\n      dot += \"  color = \\\"\"+groupColor+\"\\\";\\n\";\n      dot += \"  style = filled;\\n\";\n      let labelloc = \"t\"\n      if(this.settings.rankDir == \"BT\"){\n        labelloc = \"b\";\n      }\n      dot += \" labelloc = \\\"\"+labelloc+\"\\\";\\n\\n\";\n      \n      for(let child of node.nodes){\n        dot += this.exportNodesRecursive(child, data);\n      }\n      dot += \"\\n}\\n\\n\";\n      return dot;\n    }\n    \n    let title = node.title;\n    let text = node.text;\n    let label = \"\";\n    let color = \"#63AEF2\";\n    if(this.settings.colorNodesByFirstTag && node.tags && data.config && data.config.tags){\n      const tag = node.tags[0];\n      let tagData = data.config.tags[tag];\n      if(tagData && tagData.color){\n        color = tagData.color;\n      }\n    }\n    if(node.type == \"argument\"){\n      if(this.settings.argumentLabelMode == 'hide-untitled'){\n        label = this.getLabel(title, text);        \n      }else if(this.settings.argumentLabelMode == 'title'){\n        label = this.getLabel(title, null);\n      }else{\n        label = this.getLabel(null, text);\n      }\n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"\"+color+\"\\\",  type=\\\"\"+node.type+\"\\\"];\\n\";\n    }else if(node.type == \"statement\"){\n      if(this.settings.statementLabelMode == 'hide-untitled'){\n        label = this.getLabel(title, text);        \n      }else if(this.settings.statementLabelMode == 'title'){\n        label = this.getLabel(title, null);\n      }else{\n        label = this.getLabel(null, text);\n      }      \n      dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded,bold\\\", color=\\\"\"+color+\"\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n    }        \n    return dot;\n  }\n  getLabel(title, text){\n    let label = \"\";\n    if(this.settings.useHtmlLabels){\n      label += \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"8\\\"><TABLE BORDER=\\\"0\\\" CELLSPACING=\\\"0\\\">\";\n      if(!_.isEmpty(title) && (_.isEmpty(text) || !title.startsWith(\"Untitled\"))){\n          let titleLabel = this.foldAndEscape(title);\n          titleLabel = \"<TR><TD ALIGN=\\\"center\\\"><B>\"+titleLabel+\"</B></TD></TR>\";\n          label += titleLabel;\n      }\n      if(!_.isEmpty(text)){\n        let textLabel = this.foldAndEscape(text);\n        textLabel = \"<TR><TD ALIGN=\\\"center\\\">\"+textLabel+\"</TD></TR>\";\n        label += textLabel;\n      }\n      label += \"</TABLE></FONT>>\";\n    }else{\n      label = \"\\\"\"+this.escapeQuotesForDot(title)+\"\\\"\";\n    }    \n    return label;\n  }\n  foldAndEscape(str){\n    let strArray = this.fold(str, this.settings.lineLength, true);\n    for(let i = 0; i < strArray.length; i++){\n      strArray[i] = this.escapeForHtml(strArray[i]);\n    }\n    return strArray.join('<br/>');\n  }\n  escapeForHtml(s) {\n      return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n          return \"&#\" + c.charCodeAt(0) + \";\";\n      } );\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\"');\n  }\n\n\n  //http://jsfiddle.net/jahroy/Rwr7q/18/\n  //http://stackoverflow.com/questions/17895039/how-to-insert-line-break-after-every-80-characters\n  // Folds a string at a specified length, optionally attempting\n  // to insert newlines after whitespace characters.\n  //\n  // s          -  input string\n  // n          -  number of chars at which to separate lines\n  // useSpaces  -  if true, attempt to insert newlines at whitespace\n  // a          -  array used to build result\n  //\n  // Returns an array of strings that are no longer than n\n  // characters long.  If a is specified as an array, the lines\n  // found in s will be pushed onto the end of a.\n  //\n  // If s is huge and n is very small, this method will have\n  // problems... StackOverflow.\n  //\n\n  fold(s, n, useSpaces, a) {\n    if(!s)\n      return [];\n\n      a = a || [];\n      if (s.length <= n) {\n          a.push(s);\n          return a;\n      }\n      var line = s.substring(0, n);\n      if (! useSpaces) { // insert newlines anywhere\n          a.push(line);\n          return this.fold(s.substring(n), n, useSpaces, a);\n      }\n      else { // attempt to insert newlines after whitespace\n          var lastSpaceRgx = /\\s(?!.*\\s)/;\n          var idx = line.search(lastSpaceRgx);\n          var nextIdx = n;\n          if (idx > 0) {\n              line = line.substring(0, idx);\n              nextIdx = idx;\n          }\n          a.push(line);\n          return this.fold(s.substring(nextIdx), n, useSpaces, a);\n      }\n  }\n\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}