{"version":3,"sources":["../../src/DotExport.js"],"names":["_","DotExport","config","defaultSettings","useHtmlLabels","graphname","lineLength","groupColors","graphVizSettings","rankdir","concentrate","ratio","size","colorNodesByTag","defaults","defaultsDeep","name","request","dot","getSettings","response","map","statements","arguments","settings","groupCount","keys","Object","key","value","nodes","node","exportNodesRecursive","edges","edge","color","type","attributes","from","id","to","dotGroupId","groupLabel","labelTitle","foldAndEscape","escapeQuotesForDot","groupColor","length","level","labelloc","child","title","text","labelText","label","tags","tagsDictionary","tag","tagData","getLabel","isEmpty","titleLabel","textLabel","str","strArray","fold","i","escapeForHtml","join","s","replace","c","charCodeAt","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from \"lodash\";\n\nclass DotExport {\n    constructor(config) {\n        const defaultSettings = {\n            useHtmlLabels: true,\n            graphname: \"Argument Map\",\n            lineLength: 25,\n            groupColors: [\"#DADADA\", \"#BABABA\", \"#AAAAAA\"],\n            graphVizSettings: {\n                rankdir: \"BT\", //BT | TB | LR | RL\n                concentrate: \"false\",\n                ratio: \"auto\",\n                size: \"10,10\"\n            },\n            colorNodesByTag: true\n        };\n        this.defaults = _.defaultsDeep({}, config, defaultSettings);\n        this.name = \"DotExport\";\n    }\n    getSettings(request) {\n        if (request.dot) {\n            return request.dot;\n        } else if (request.DotExport) {\n            return request.DotExport;\n        } else {\n            request.dot = {};\n            return request.dot;\n        }\n    }\n    prepare(request) {\n        _.defaultsDeep(this.getSettings(request), this.defaults);\n    }\n    run(request, response) {\n        if (!response.map || !response.statements || !response.arguments) {\n            return response;\n        }\n        const settings = this.getSettings(request);\n\n        response.groupCount = 0;\n        let dot = 'digraph \"' + settings.graphname + '\" {\\n\\n';\n        if (settings.graphVizSettings) {\n            const keys = Object.keys(settings.graphVizSettings);\n            for (let key of keys) {\n                const value = settings.graphVizSettings[key];\n                dot += key + ' = \"' + value + '\";\\n';\n            }\n        }\n\n        for (let node of response.map.nodes) {\n            dot += this.exportNodesRecursive(node, response, settings);\n        }\n\n        dot += \"\\n\\n\";\n\n        for (let edge of response.map.edges) {\n            let color = \"green\";\n            if (edge.type == \"attack\") {\n                color = \"red\";\n            } else if (edge.type == \"undercut\") {\n                color = \"purple\";\n            }\n            let attributes = 'color=\"' + color + '\", type=\"' + edge.type + '\"';\n            dot += \"  \" + edge.from.id + \" -> \" + edge.to.id + \" [\" + attributes + \"];\\n\";\n        }\n\n        dot += \"\\n}\";\n\n        response.dot = dot;\n        return response;\n    }\n    exportNodesRecursive(node, response, settings) {\n        let dot = \"\";\n        if (node.type == \"group\") {\n            response.groupCount++;\n            let dotGroupId = \"cluster_\" + response.groupCount;\n            let groupLabel = node.labelTitle;\n            if (settings.useHtmlLabels) {\n                groupLabel = this.foldAndEscape(groupLabel, settings);\n                groupLabel = '<<FONT FACE=\"Arial\" POINT-SIZE=\"10\">' + groupLabel + \"</FONT>>\";\n            } else {\n                groupLabel = '\"' + this.escapeQuotesForDot(groupLabel) + '\"';\n            }\n            let groupColor = \"#CCCCCC\";\n            if (settings.groupColors && settings.groupColors.length > 0) {\n                if (settings.groupColors.length >= node.level) {\n                    groupColor = settings.groupColors[node.level];\n                } else {\n                    groupColor = settings.groupColors[settings.groupColors.length - 1];\n                }\n            }\n\n            dot += \"\\nsubgraph \" + dotGroupId + \" {\\n\";\n            dot += \"  label = \" + groupLabel + \";\\n\";\n            dot += '  color = \"' + groupColor + '\";\\n';\n            dot += \"  style = filled;\\n\";\n            let labelloc = \"t\";\n            if (settings.graphVizSettings.rankdir == \"BT\") {\n                labelloc = \"b\";\n            }\n            dot += ' labelloc = \"' + labelloc + '\";\\n\\n';\n\n            for (let child of node.nodes) {\n                dot += this.exportNodesRecursive(child, response, settings);\n            }\n            dot += \"\\n}\\n\\n\";\n            return dot;\n        }\n\n        let title = node.labelTitle;\n        let text = node.labelText;\n        let label = \"\";\n        let color = \"#63AEF2\";\n        if (settings.colorNodesByTag && node.tags && response.tagsDictionary) {\n            const tag = node.tags[0];\n            let tagData = response.tagsDictionary[tag];\n            if (tagData && tagData.color) {\n                color = tagData.color;\n            }\n        }\n        label = this.getLabel(title, text, settings);\n        if (node.type == \"argument\") {\n            dot +=\n                \"  \" +\n                node.id +\n                \" [label=\" +\n                label +\n                ', shape=\"box\", style=\"filled,rounded\", fillcolor=\"' +\n                color +\n                '\",  type=\"' +\n                node.type +\n                '\"];\\n';\n        } else if (node.type == \"statement\") {\n            dot +=\n                \"  \" +\n                node.id +\n                \" [label=\" +\n                label +\n                ', shape=\"box\", style=\"filled,rounded,bold\", color=\"' +\n                color +\n                '\", fillcolor=\"white\", labelfontcolor=\"white\", type=\"' +\n                node.type +\n                '\"];\\n';\n        }\n        return dot;\n    }\n    getLabel(title, text, settings) {\n        let label = \"\";\n        if (settings.useHtmlLabels) {\n            label += '<<FONT FACE=\"Arial\" POINT-SIZE=\"8\"><TABLE BORDER=\"0\" CELLSPACING=\"0\">';\n            if (!_.isEmpty(title)) {\n                let titleLabel = this.foldAndEscape(title, settings);\n                titleLabel = '<TR><TD ALIGN=\"center\"><B>' + titleLabel + \"</B></TD></TR>\";\n                label += titleLabel;\n            }\n            if (!_.isEmpty(text)) {\n                let textLabel = this.foldAndEscape(text, settings);\n                textLabel = '<TR><TD ALIGN=\"center\">' + textLabel + \"</TD></TR>\";\n                label += textLabel;\n            }\n            label += \"</TABLE></FONT>>\";\n        } else {\n            label = '\"' + this.escapeQuotesForDot(title) + '\"';\n        }\n        return label;\n    }\n    foldAndEscape(str, settings) {\n        let strArray = this.fold(str, settings.lineLength, true);\n        for (let i = 0; i < strArray.length; i++) {\n            strArray[i] = this.escapeForHtml(strArray[i]);\n        }\n        return strArray.join(\"<br/>\");\n    }\n    escapeForHtml(s) {\n        return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n            return \"&#\" + c.charCodeAt(0) + \";\";\n        });\n    }\n    escapeQuotesForDot(str) {\n        return str.replace(/\\\"/g, '\\\\\"');\n    }\n\n    //http://jsfiddle.net/jahroy/Rwr7q/18/\n    //http://stackoverflow.com/questions/17895039/how-to-insert-line-break-after-every-80-characters\n    // Folds a string at a specified length, optionally attempting\n    // to insert newlines after whitespace characters.\n    //\n    // s          -  input string\n    // n          -  number of chars at which to separate lines\n    // useSpaces  -  if true, attempt to insert newlines at whitespace\n    // a          -  array used to build result\n    //\n    // Returns an array of strings that are no longer than n\n    // characters long.  If a is specified as an array, the lines\n    // found in s will be pushed onto the end of a.\n    //\n    // If s is huge and n is very small, this method will have\n    // problems... StackOverflow.\n    //\n\n    fold(s, n, useSpaces, a) {\n        if (!s) return [];\n\n        a = a || [];\n        if (s.length <= n) {\n            a.push(s);\n            return a;\n        }\n        var line = s.substring(0, n);\n        if (!useSpaces) {\n            // insert newlines anywhere\n            a.push(line);\n            return this.fold(s.substring(n), n, useSpaces, a);\n        } else {\n            // attempt to insert newlines after whitespace\n            var lastSpaceRgx = /\\s(?!.*\\s)/;\n            var idx = line.search(lastSpaceRgx);\n            var nextIdx = n;\n            if (idx > 0) {\n                line = line.substring(0, idx);\n                nextIdx = idx;\n            }\n            a.push(line);\n            return this.fold(s.substring(nextIdx), n, useSpaces, a);\n        }\n    }\n}\nmodule.exports = {\n    DotExport: DotExport\n};\n"]}