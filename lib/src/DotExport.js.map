{"version":3,"sources":["../../src/DotExport.js"],"names":["_","DotExport","config","settings","defaults","useHtmlLabels","onlyTitlesInHtmlLabels","graphname","lineLength","name","data","dot","map","nodes","node","element","type","statements","title","arguments","label","escapeForHtml","labelArray","fold","join","lastMember","last","members","descriptions","content","text","contentArray","i","length","escapeQuotesForDot","id","edges","edge","color","attributes","from","to","s","replace","c","charCodeAt","str","n","useSpaces","a","push","line","substring","lastSpaceRgx","idx","search","nextIdx","module","exports"],"mappings":"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","file":"DotExport.js","sourcesContent":["import * as _ from 'lodash';\n\nclass DotExport{\n  set config(config){\n    this.settings = _.defaults(config ||{}, {\n      useHtmlLabels : true,\n      onlyTitlesInHtmlLabels: false,\n      graphname: 'Argument Map',\n      lineLength: 25\n    });\n  }\n  constructor(config){\n    this.name = \"DotExport\";\n    this.config = config;\n  }\n  run(data){\n    let dot = \"digraph \\\"\"+this.settings.graphname+\"\\\" {\\n\\n\";\n\n    for(let node of data.map.nodes){\n      let element;\n      if(node.type == \"statement\"){\n        element = data.statements[node.title];\n      }else{\n        element = data.arguments[node.title];\n      }\n      let label = \"\";\n      if(this.settings.useHtmlLabels){\n        label = this.escapeForHtml(node.title);\n        let labelArray = this.fold(label, this.settings.lineLength, true);\n        label = labelArray.join('<br/>');\n        label = \"<<FONT FACE=\\\"Arial\\\" POINT-SIZE=\\\"8\\\"><TABLE BORDER=\\\"0\\\" CELLSPACING=\\\"0\\\"><TR><TD ALIGN=\\\"center\\\"><B>\"+label+\"</B></TD></TR>\";\n        if(!this.settings.onlyTitlesInHtmlLabels){\n          let lastMember;\n          if(node.type == \"statement\"){\n            lastMember = _.last(element.members);\n          }else{\n            lastMember = _.last(element.descriptions);\n          }\n          if(lastMember){\n            let content = lastMember.text;\n            if(content){\n              let contentArray = this.fold(content, this.settings.lineLength, true);\n              for(let i = 0; i < contentArray.length; i++){\n                contentArray[i] = this.escapeForHtml(contentArray[i]);\n              }\n              content = contentArray.join('<br/>');\n              label += \"<TR><TD ALIGN=\\\"center\\\">\"+content+\"</TD></TR>\";\n            }\n          }\n        }\n        label += \"</TABLE></FONT>>\";\n      }else{\n        label = \"\\\"\"+this.escapeQuotesForDot(node.title)+\"\\\"\";\n      }\n      if(node.type == \"statement\"){\n        dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded,bold\\\", color=\\\"#63AEF2\\\", fillcolor=\\\"white\\\", labelfontcolor=\\\"white\\\", type=\\\"\"+node.type+\"\\\"];\\n\";\n      }else{\n        dot += \"  \"+node.id + \" [label=\"+label+\", shape=\\\"box\\\", style=\\\"filled,rounded\\\", fillcolor=\\\"#63AEF2\\\",  type=\\\"\"+node.type+\"\\\"];\\n\";\n      }\n    }\n\n    dot +=\"\\n\\n\";\n\n    for(let edge of data.map.edges){\n      let color = \"green\";\n      if(edge.type == \"attack\"){\n        color = \"red\";\n      }\n      let attributes = \"color=\\\"\"+color+\"\\\", type=\\\"\"+edge.type+\"\\\"\";\n      dot += \"  \"+edge.from.id + \" -> \" + edge.to.id + \" [\"+attributes+\"];\\n\";\n    }\n\n    dot += \"\\n}\";\n\n    data.dot = dot;\n    return data;\n  }\n  escapeForHtml(s) {\n      return s.replace(/[^0-9A-Za-z ]/g, function(c) {\n          return \"&#\" + c.charCodeAt(0) + \";\";\n      } );\n  }\n  escapeQuotesForDot(str){\n    return str.replace(/\\\"/g,'\\\\\"');\n  }\n\n\n  //http://jsfiddle.net/jahroy/Rwr7q/18/\n  //http://stackoverflow.com/questions/17895039/how-to-insert-line-break-after-every-80-characters\n  // Folds a string at a specified length, optionally attempting\n  // to insert newlines after whitespace characters.\n  //\n  // s          -  input string\n  // n          -  number of chars at which to separate lines\n  // useSpaces  -  if true, attempt to insert newlines at whitespace\n  // a          -  array used to build result\n  //\n  // Returns an array of strings that are no longer than n\n  // characters long.  If a is specified as an array, the lines\n  // found in s will be pushed onto the end of a.\n  //\n  // If s is huge and n is very small, this method will have\n  // problems... StackOverflow.\n  //\n\n  fold(s, n, useSpaces, a) {\n    if(!s)\n      return [];\n\n      a = a || [];\n      if (s.length <= n) {\n          a.push(s);\n          return a;\n      }\n      var line = s.substring(0, n);\n      if (! useSpaces) { // insert newlines anywhere\n          a.push(line);\n          return this.fold(s.substring(n), n, useSpaces, a);\n      }\n      else { // attempt to insert newlines after whitespace\n          var lastSpaceRgx = /\\s(?!.*\\s)/;\n          var idx = line.search(lastSpaceRgx);\n          var nextIdx = n;\n          if (idx > 0) {\n              line = line.substring(0, idx);\n              nextIdx = idx;\n          }\n          a.push(line);\n          return this.fold(s.substring(nextIdx), n, useSpaces, a);\n      }\n  }\n\n}\nmodule.exports = {\n  DotExport: DotExport\n}\n"]}